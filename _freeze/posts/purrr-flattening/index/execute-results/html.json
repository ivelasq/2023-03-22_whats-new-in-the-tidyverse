{
  "hash": "5670b8dfbe7b32d67bf05237fb5f5e1d",
  "result": {
    "markdown": "---\ntitle: \"Flattening and simplification\"\nsubtitle: \"purrr 1.1.0\"\ndate: 2022-12-20\nimage: \"purrr-flattening-simplification.png\"\nimage-alt: \"purrr flattening and simplification.png.\"\ncategories:\n  - \"purrr\"\ndescription: \"purrr 1.0.0 has new functions for flattening and simplifying lists.\"\nengine: knitr\neditor: visual\n---\n\n\nInstall purrr 1.0.0 with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"cran/purrr@1.0.0\")\n```\n:::\n\n\nLoad the package with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n:::\n\n\n## Flattening\n\n`list_flatten()` removes one layer of hierarchy from a list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(1, list(2, list(3, 4), 5))\nx |> str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 2\n $ : num 1\n $ :List of 3\n  ..$ : num 2\n  ..$ :List of 2\n  .. ..$ : num 3\n  .. ..$ : num 4\n  ..$ : num 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx |> list_flatten() |> str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 4\n $ : num 1\n $ : num 2\n $ :List of 2\n  ..$ : num 3\n  ..$ : num 4\n $ : num 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx |> list_flatten() |> list_flatten() |> str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 5\n $ : num 1\n $ : num 2\n $ : num 3\n $ : num 4\n $ : num 5\n```\n:::\n:::\n\n\n`list_flatten()` always returns a list; once a list is as flat as it can get (i.e. none of its children contain lists), it leaves the input unchanged.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx |> list_flatten() |> list_flatten() |> list_flatten() |> str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 5\n $ : num 1\n $ : num 2\n $ : num 3\n $ : num 4\n $ : num 5\n```\n:::\n:::\n\n\n## Simplification\n\n`list_simplify()` maintains the length of the input, but produces a simpler type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(1, 2, 3)\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny <-\n  x |> list_simplify()\n\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\nA few rules for `list_simplify()`:\n\n* It will only succeed if every element has length 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_simplify(list(1, 2, 3:4))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `list_simplify()`:\n! `x[[3]]` must have size 1, not size 2.\n```\n:::\n:::\n\n\n* All the components must be compatible\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_simplify(list(1, 2, \"a\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `list_simplify()`:\n! Can't combine `<list>[[1]]` <double> and `<list>[[3]]` <character>.\n```\n:::\n:::\n\n\nIf you need to simplify if itâ€™s possible, but otherwise leave the input unchanged, use `strict = FALSE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_simplify(list(1, 2, \"a\"), strict = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] \"a\"\n```\n:::\n:::\n\n\nIf you want to be specific about the type you want, list_simplify() can take the same prototype argument as map_vec():\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(1, 2, 3) |> list_simplify(ptype = integer())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n:::\n\n\n## Concatenation\n\n`map_dfr()` and `map_dfc()` (and the `map2` and `pmap`) variants are superseded. Consider switching to an explicit call to `list_rbind()` or `list_cbind()` instead:\n\n:::{.panel-tabset}\n\n## Before\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaths |> map_dfr(read_csv, .id = \"path\")\n```\n:::\n\n\n## After\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaths |> \n  map(read_csv) |> \n  list_rbind(names_to = \"path\")\n```\n:::\n\n\n:::\n\n### Learn more\n\n-   [tidyverse blog: purrr 1.0.0](https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/)\n-   [purrr release notes](https://github.com/tidyverse/purrr/releases/tag/v1.0.0)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}