{
  "hash": "e9963a3140d5f63f504452985a861cdd",
  "result": {
    "markdown": "---\ntitle: \"`keep_at()` and `discard_at()`\"\nsubtitle: \"purrr 1.1.0\"\ndate: 2022-12-20\nimage: \"purrr-keep-at-discard-at.png\"\nimage-alt: \"Text that says purrr keep_at, discard_at. A screenshot of a list that has keep_at applied to it.\"\ncategories:\n  - \"purrr\"\ndescription: purrr has two new functions, keep_at() and discard_at(), that operate on names.\nengine: knitr\neditor: visual\n---\n\n\nInstall purrr 1.0.0 with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"cran/purrr@1.0.0\")\n```\n:::\n\n\nLoad the package with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n:::\n\n\n## `keep_at()` and `discard_at()`\n\npurrr has two functions, `keep()` and `discard()`, that keep/discard elements by value:\n\n::: panel-tabset\n## `keep()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(10, 10) |>\n  map(sample, 5) |>\n  keep(function(x) mean(x) > 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1]  9 10  3  6  5\n\n[[2]]\n[1]  6 10  1  8  9\n```\n:::\n:::\n\n\n## `discard()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(10, 10) |>\n  map(sample, 5) |>\n  discard(function(x) mean(x) > 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 4 5 7 2 6\n\n[[2]]\n[1] 9 7 3 1 8\n\n[[3]]\n[1] 2 9 6 8 4\n\n[[4]]\n[1] 2 4 5 7 6\n\n[[5]]\n[1]  4  7 10  3  1\n\n[[6]]\n[1] 6 5 2 4 7\n```\n:::\n:::\n\n:::\n\npurrr has two new functions, `keep_at()` and `discard_at()`, that work like `keep()` and `discard()` but operate on names rather than values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(a = 1, b = 2, c = 3, D = 4, E = 5)\n\nx |> \n  keep_at(c(\"a\", \"b\", \"c\")) |> \n  str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ a: num 1\n $ b: num 2\n $ c: num 3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx |> \n  discard_at(c(\"a\", \"b\", \"c\")) |> \n  str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 2\n $ D: num 4\n $ E: num 5\n```\n:::\n:::\n\n\nOr, you can provide a logical vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_lower_case <- function(x) x == tolower(x)\n\nx |> keep_at(is_lower_case)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1\n\n$b\n[1] 2\n\n$c\n[1] 3\n```\n:::\n:::\n\n\n### Learn more\n\n-   [tidyverse blog: purrr 1.0.0](https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/)\n-   [purrr release notes](https://github.com/tidyverse/purrr/releases/tag/v1.0.0)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}