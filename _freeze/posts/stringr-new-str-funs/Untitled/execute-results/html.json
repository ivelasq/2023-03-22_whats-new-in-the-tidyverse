{
  "hash": "462eff2ee8c2d866b10e9e46be3e8fdd",
  "result": {
    "markdown": "---\ntitle: \"New str_* functions\"\nsubtitle: \"stringr\"\nengine: knitr\nexecute:\n  echo: true\n  error: true\nembed-resources: true\nformat:\n    html: \n      toc: true\neditor: source\n---\n\n```{=html}\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css\">\n<style>\n  .CodeMirror pre {\n    background-color: unset !important;\n  }\n  .btn-webr {\n    background-color: #EEEEEE;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n</style>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/r/r.js\"></script>\n<script type=\"module\">\n  import { WebR } from \"https://webr.r-wasm.org/v0.1.0/webr.mjs\";\n  globalThis.webR = new WebR({\n    SW_URL: \"/\"\n  });\n  await globalThis.webR.init();\n  globalThis.webRCodeShelter = await new globalThis.webR.Shelter();\n  document.querySelectorAll(\".btn-webr\").forEach((btn) => {\n    btn.innerText = \"Run code\";\n    btn.disabled = false;\n  });\n</script>\n```\n\n\n\n::: {.cell}\n\n:::\n\n\nInstall the latest version of stringr with:\n\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-1\">Loading webR...</button>\n<div id=\"webr-editor-1\"></div>\n<div id=\"webr-code-output-1\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-1\");\n  const outputDiv = document.getElementById(\"webr-code-output-1\");\n  const editorDiv = document.getElementById(\"webr-editor-1\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `webr::install(\"stringr\")\\nlibrary(\"stringr\")`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n\n\n## Comparing strings\n\n### Compare two character vectors\n\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-2\">Loading webR...</button>\n<div id=\"webr-editor-2\"></div>\n<div id=\"webr-code-output-2\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-2\");\n  const outputDiv = document.getElementById(\"webr-code-output-2\");\n  const editorDiv = document.getElementById(\"webr-editor-2\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `str_equal(\"a\", \"A\")\\n#> [1] FALSE\\nstr_equal(\"a\", \"A\", ignore_case = TRUE)\\n#> [1] TRUE`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}