{
  "hash": "ff7e02cc258f7121b3753690aaaa68da",
  "result": {
    "markdown": "---\ntitle: \"`unnest_wider()` and `unnest_longer()` improvements\"\nsubtitle: \"tidyr 1.3.0\"\ndate: 2023-01-24\nimage: \"tidyr-unnest-wider-unnest-longer-improvements.png\"\nimage-alt: \"tidyr 1.3.0. Screenshot of text of an error from unnest_longer.\"\ncategories:\n  - \"tidyr\"\ndescription: \"`unnest_longer()` and `unnest_wider()` have received some quality of life and consistency improvements.\"\nengine: knitr\neditor: source\n---\n\n\nInstall tidyr 1.3.0 with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"cran/tidyr@1.3.0\")\n```\n:::\n\n\n## `unnest_wider()` and `unnest_longer()` improvements\n\n`unnest_longer()` and `unnest_wider()` have received some quality of life and consistency improvements. \n\n`unnest_wider()` now gives a better error when unnesting an unnamed vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\ndf <- tibble(\n  id = 1:2,\n  x = list(c(\"a\", \"b\"), c(\"d\", \"e\", \"f\"))\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n     id x        \n  <int> <list>   \n1     1 <chr [2]>\n2     2 <chr [3]>\n```\n:::\n\n```{.r .cell-code}\ndf |> \n  unnest_wider(x)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `unnest_wider()`:\nℹ In column: `x`.\nℹ In row: 1.\nCaused by error:\n! Can't unnest elements with missing names.\nℹ Supply `names_sep` to generate automatic names.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  unnest_wider(x, names_sep = \"_\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n     id x_1   x_2   x_3  \n  <int> <chr> <chr> <chr>\n1     1 a     b     <NA> \n2     2 d     e     f    \n```\n:::\n:::\n\n\n`unnest_longer()` has gained a `keep_empty` argument like `unnest()`, and it now treats `NULL` and empty vectors the same way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  id = 1:3,\n  x = list(NULL, integer(), 1:3)\n)\n\ndf \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n     id x        \n  <int> <list>   \n1     1 <NULL>   \n2     2 <int [0]>\n3     3 <int [3]>\n```\n:::\n\n```{.r .cell-code}\ndf |> unnest_longer(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n     id     x\n  <int> <int>\n1     3     1\n2     3     2\n3     3     3\n```\n:::\n\n```{.r .cell-code}\ndf |> unnest_longer(x, keep_empty = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n     id     x\n  <int> <int>\n1     1    NA\n2     2    NA\n3     3     1\n4     3     2\n5     3     3\n```\n:::\n:::\n\n\n### Learn more\n\n* [tidyverse blog: 1.3.0](https://www.tidyverse.org/blog/2023/01/tidyr-1-3-0/)\n* [Release notes](https://github.com/tidyverse/tidyr/releases/tag/v1.3.0)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}