{
  "hash": "7933f500579df24cf0854e586233ad7c",
  "result": {
    "markdown": "---\ntitle: \"Mapping\"\nsubtitle: \"purrr 1.1.0\"\ndate: 2022-12-20\nimage: \"purrr-mapping.png\"\nimage-alt: \"purrr 1.1.0 mapping. A screenshot of a purrr progress bar with \"\ncategories:\n  - \"purrr\"\ndescription: \"There are three big new mapping features in purrr 1.0.0: progress bars, better errors, and `map_vec()`.\"\nengine: knitr\neditor: source\n---\n\n\nInstall purrr 1.0.0 with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"cran/purrr@1.0.0\")\n```\n:::\n\n\nLoad the package with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n:::\n\n\n## Mapping\n\nThere are three big new mapping features in purrr 1.0.0:\n\n-   Progress bars!\n-   Better errors\n-   A new `map_*` family member: `map_vec()`.\n\n### Progress bars\n\nSee a progress bar for long running jobs using `.progress = TRUE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- map(1:100, \\(x) Sys.sleep(0.1), .progress = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n ■■■■■                             15% |  ETA:  9s\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n ■■■■■■■■■■■■■■                    44% |  ETA:  6s\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n ■■■■■■■■■■■■■■■■■■■■■■■           73% |  ETA:  3s\n```\n:::\n:::\n\n\nSet `.progress` to a string if you want to identify the progress bar (in this case, `.progress = \"Saving plots\"`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- map(1:100, \\(x) Sys.sleep(0.1), .progress = \"Waiting...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWaiting... ■■■■■■■■■■                        30% |  ETA:  7s\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWaiting... ■■■■■■■■■■■■■■■■■■■               59% |  ETA:  4s\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWaiting... ■■■■■■■■■■■■■■■■■■■■■■■■■■■       88% |  ETA:  1s\n```\n:::\n:::\n\n\n### Better errors\n\n`map()` and friends now tell you which element caused the problem in the function you mapped.\n\nIn this case, we have a list with two numeric and one character value. When we try to divide it by 2 using `map()`, we get an error telling us there's an issue with index 3 (`\"a\"`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(10, 5, \"a\")\nx |> map(\\(x) x / 2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `map()`:\nℹ In index: 3.\nCaused by error in `x / 2`:\n! non-numeric argument to binary operator\n```\n:::\n:::\n\n\n## `map_vec()`\n\nThe `map_*` family applies a function to each element of a list. We've had `map()`, `map_lgl()`, `map_int()`, `map_dbl()`, and `map_chr()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:3 |> map(\\(x) rnorm(10, x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1]  2.6826057  1.6314088  0.5877358  0.3281883  1.4118076  0.2460912\n [7]  3.3178964  2.0437852  1.0673998 -0.6362567\n\n[[2]]\n [1] 1.982024 2.079093 3.334697 1.970019 2.366811 1.919516 3.889422 2.137628\n [9] 2.614697 2.132098\n\n[[3]]\n [1] 1.577695 2.984735 3.145692 3.346063 2.633627 1.688045 3.767580 4.363624\n [9] 4.375538 3.878823\n```\n:::\n:::\n\n\nNow we have: `map_vec()`!\n\n`map_vec()` is a generalized `map_*()` that works with an arbitrary types of vectors, like dates, factors, and date-times.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:3 |> map_vec(\\(i) as.Date(ISOdate(2023, 0 + i, 5)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-01-05\" \"2023-02-05\" \"2023-03-05\"\n```\n:::\n:::\n\n\nIt will error if you try to combine different types:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(\"a\", 1) |> map_vec(identity)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `map_vec()`:\n! Can't combine `<list>[[1]]` <character> and `<list>[[2]]` <double>.\n```\n:::\n:::\n\n\n### Learn more\n\n-   [tidyverse blog: purrr 1.0.0](https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}