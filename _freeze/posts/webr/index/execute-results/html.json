{
  "hash": "b99449c17d794ce47c06227f30908a69",
  "result": {
    "markdown": "---\ntitle: \"webR with Quarto HTML Standalone Document Proof of Concept\"\nsubtitle: \"Experiments with an Interactive Quarto Document using webR v0.1.0\"\nauthor: \"James J Balamuta; modified by EEH\"\nengine: knitr\nexecute:\n  echo: true\n  error: true\nembed-resources: true\nformat:\n    html: \n      toc: true\neditor: source\n---\n\n\n# Demo\n\n## Background\n\nThe purpose of this document is to explore how WebR can be embedded in a \nQuarto Document for the purposes of teaching _R_. \n\n- WebR Website: <https://docs.r-wasm.org/webr/latest/>\n- WebR GitHub: <https://github.com/r-wasm/webr/>\n\n## Setup \n\nSee the <https://github.com/coatless-r-n-d/webR-quarto-demos> for source.\n\n\n```{=html}\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css\">\n<style>\n  .CodeMirror pre {\n    background-color: unset !important;\n  }\n  .btn-webr {\n    background-color: #EEEEEE;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n</style>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/r/r.js\"></script>\n<script type=\"module\">\n  import { WebR } from \"https://webr.r-wasm.org/v0.1.0/webr.mjs\";\n  globalThis.webR = new WebR({\n    SW_URL: \"/\"\n  });\n  await globalThis.webR.init();\n  globalThis.webRCodeShelter = await new globalThis.webR.Shelter();\n  document.querySelectorAll(\".btn-webr\").forEach((btn) => {\n    btn.innerText = \"Run code\";\n    btn.disabled = false;\n  });\n</script>\n```\n\n\n\n::: {.cell}\n\n:::\n\n\n## Exploration\n\nNext, let's look at a few features of the language\n\n### Linear Regression\n\nWe'll first start with the WebR team's demo example or the statistician way of\nsaying, \"Hello world!\"... Aka linear regression:\n\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-1\">Loading webR...</button>\n<div id=\"webr-editor-1\"></div>\n<div id=\"webr-code-output-1\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-1\");\n  const outputDiv = document.getElementById(\"webr-code-output-1\");\n  const editorDiv = document.getElementById(\"webr-editor-1\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `fit = lm(mpg ~ am, data=mtcars)\\nsummary(fit)`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n\n\n### Retrieving prior objects\n\nEach WebR cell appears to be connected to each other. Thus, we can access the\n`fit` outcome:\n\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-2\">Loading webR...</button>\n<div id=\"webr-editor-2\"></div>\n<div id=\"webr-code-output-2\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-2\");\n  const outputDiv = document.getElementById(\"webr-code-output-2\");\n  const editorDiv = document.getElementById(\"webr-editor-2\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `coef(fit)`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-3\">Loading webR...</button>\n<div id=\"webr-editor-3\"></div>\n<div id=\"webr-code-output-3\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-3\");\n  const outputDiv = document.getElementById(\"webr-code-output-3\");\n  const editorDiv = document.getElementById(\"webr-editor-3\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `anova(fit)`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n\n\n### Mixing active and non-active _R_ code\n\nFor _if-else_ statements, we have:\n\n```r\nif (...) {\n  # Statements for TRUE\n} else {\n  # Statements for FALSE\n}\n```\n\n- `...` denotes a condition (either `TRUE` or `FALSE`)\n- If `TRUE`, then run the statements inside `{}`\n- Else, `FALSE`, carry on with your day. \n\nHow could we modify `temperature` to have the `if` statement print `\"Hot!\"`? \n\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-4\">Loading webR...</button>\n<div id=\"webr-editor-4\"></div>\n<div id=\"webr-code-output-4\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-4\");\n  const outputDiv = document.getElementById(\"webr-code-output-4\");\n  const editorDiv = document.getElementById(\"webr-editor-4\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `# Let's classify \\ntemperature = 60\\n\\nif (temperature > 76) {\\n    print(\"Hot!\")\\n} else {\\n    print(\"Cold!\")\\n}`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n\n\n\n### Summarize Data\n\nGlancing at data frames yields: \n\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-5\">Loading webR...</button>\n<div id=\"webr-editor-5\"></div>\n<div id=\"webr-code-output-5\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-5\");\n  const outputDiv = document.getElementById(\"webr-code-output-5\");\n  const editorDiv = document.getElementById(\"webr-editor-5\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `summary(mtcars)`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n\n\n### Errors and Warnings\n\n\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-6\">Loading webR...</button>\n<div id=\"webr-editor-6\"></div>\n<div id=\"webr-code-output-6\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-6\");\n  const outputDiv = document.getElementById(\"webr-code-output-6\");\n  const editorDiv = document.getElementById(\"webr-editor-6\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `stop(\"What happens if an error is present?\")`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-7\">Loading webR...</button>\n<div id=\"webr-editor-7\"></div>\n<div id=\"webr-code-output-7\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-7\");\n  const outputDiv = document.getElementById(\"webr-code-output-7\");\n  const editorDiv = document.getElementById(\"webr-editor-7\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `warning(\"You shouldn't be here...\")`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n\n\n\n### Base graphics\n\nGraphing with base R \n\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-8\">Loading webR...</button>\n<div id=\"webr-editor-8\"></div>\n<div id=\"webr-code-output-8\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-8\");\n  const outputDiv = document.getElementById(\"webr-code-output-8\");\n  const editorDiv = document.getElementById(\"webr-editor-8\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `plot(pressure)`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n\n\nMore advanced base R graphing... \n\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-9\">Loading webR...</button>\n<div id=\"webr-editor-9\"></div>\n<div id=\"webr-code-output-9\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-9\");\n  const outputDiv = document.getElementById(\"webr-code-output-9\");\n  const editorDiv = document.getElementById(\"webr-editor-9\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `x1 = seq(0, 1, length = 20)\\ny1 = rep(0, 20)\\nx2 = rep(0, 20)\\ny2 = seq(0.75, 0, length = 20)\\n\\nplot(0, type = \"n\",\\n     axes = FALSE, ylab = \"\", xlab = \"\", \\n     xlim = c(0, 1), ylim = c(0, 0.75), asp = 1,\\n     main = \"Straight Lines as a Curve\")\\n\\nsegments(x1, y1, x2, y2)\\nbox(col = \"grey\")`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n\n\n### ggplot2 Graphics\n\nNext, we look at using `ggplot2` graphics. By default, the `ggplot2` package\nis not available as it is _dependency_ heavy. \n\n\n```{=html}\n<details>\n<summary>\nPackage installation for `ggplot2` given by `webr::install(\"ggplot2\")`\n</summary>\nDownloading webR package: cli\nDownloading webR package: glue\nDownloading webR package: gtable\nDownloading webR package: isoband\nDownloading webR package: rlang\nDownloading webR package: lifecycle\nDownloading webR package: MASS\nDownloading webR package: lattice\nDownloading webR package: nlme\nDownloading webR package: Matrix\nDownloading webR package: mgcv\nDownloading webR package: farver\nDownloading webR package: labeling\nDownloading webR package: colorspace\nDownloading webR package: munsell\nDownloading webR package: R6\nDownloading webR package: RColorBrewer\nDownloading webR package: viridisLite\nDownloading webR package: scales\nDownloading webR package: fansi\nDownloading webR package: magrittr\nDownloading webR package: utf8\nDownloading webR package: vctrs\nDownloading webR package: pillar\nDownloading webR package: pkgconfig\nDownloading webR package: tibble\nDownloading webR package: withr\nDownloading webR package: ggplot2\n</details>\n```\n\n::: {.cell}\n<button class=\"btn btn-default btn-webr\" disabled type=\"button\"  id=\"webr-run-button-10\">Loading webR...</button>\n<div id=\"webr-editor-10\"></div>\n<div id=\"webr-code-output-10\"><pre style=\"visibility: hidden\"></pre></div>\n<script type=\"module\">\n  const runButton = document.getElementById(\"webr-run-button-10\");\n  const outputDiv = document.getElementById(\"webr-code-output-10\");\n  const editorDiv = document.getElementById(\"webr-editor-10\");\n\n  const editor = CodeMirror((elt) => {\n    elt.style.border = \"1px solid #eee\";\n    elt.style.height = \"auto\";\n    editorDiv.append(elt);\n  },{\n    value: `# Install non-base R packages\\nwebr::install(\"ggplot2\")\\n# Load non-base packages like normal\\nlibrary(\"ggplot2\")\\np = ggplot(mpg, aes(class, hwy))\\np + geom_boxplot()`,\n    lineNumbers: true,\n    mode: \"r\",\n    theme: \"light default\",\n    viewportMargin: Infinity,\n  });\n\n  runButton.onclick = async () => {\n    runButton.disabled = true;\n    let canvas = undefined;\n    await globalThis.webR.init();\n    await webR.evalRVoid(\"canvas(width=504, height=360)\");\n    const result = await webRCodeShelter.captureR(editor.getValue(), {\n      withAutoprint: true,\n      captureStreams: true,\n      captureConditions: false,\n      env: webR.objs.emptyEnv,\n    });\n    try {\n      await webR.evalRVoid(\"dev.off()\");\n      const out = result.output.filter(\n        evt => evt.type == \"stdout\" || evt.type == \"stderr\"\n      ).map((evt) => evt.data).join(\"\\n\");\n\n      const msgs = await webR.flush();\n      msgs.forEach(msg => {\n        if (msg.type === \"canvasExec\"){\n          if (!canvas) {\n            canvas = document.createElement(\"canvas\");\n            canvas.setAttribute(\"width\", 2 * 504);\n            canvas.setAttribute(\"height\", 2 * 360);\n            canvas.style.width=\"700px\";\n            canvas.style.display=\"block\";\n            canvas.style.margin=\"auto\";\n          }\n          Function(`this.getContext(\"2d\").${msg.data}`).bind(canvas)();\n        }\n      });\n\n      outputDiv.innerHTML = \"\";\n      const pre = document.createElement(\"pre\");\n      if (/\\S/.test(out)) {\n        const code = document.createElement(\"code\");\n        code.innerText = out;\n        pre.appendChild(code);\n      } else {\n        pre.style.visibility = \"hidden\";\n      }\n      outputDiv.appendChild(pre);\n\n      if (canvas) {\n        const p = document.createElement(\"p\");\n        p.appendChild(canvas);\n        outputDiv.appendChild(p);\n      }\n    } finally {\n      webRCodeShelter.purge();\n      runButton.disabled = false;\n    }\n  }\n\n  await globalThis.webR.init();\n  runButton.innerText = \"Run code\";\n  runButton.disabled = false;\n</script>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}