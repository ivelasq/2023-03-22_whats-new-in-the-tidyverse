{
  "hash": "5d5f2f7c1ff9ed11defe85ed85abc48a",
  "result": {
    "markdown": "---\nsubtitle: \"tidyr 1.3.0\"\ntitle: \"New `separate_* functions`\"\ndate: 2023-01-24\nimage: \"tidyr-separate-family.png\"\nimage-alt: \"tidyr 1.3.0. Screenshot of text of various separate functions.\"\ncategories:\n  - \"tidyr\"\ndescription: A new family of `separate_*()` functions supersedes `separate()`, `separate_rows()`, and `extract()`.\nengine: knitr\neditor: source\n---\n\n\nInstall tidyr 1.3.0 with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"cran/tidyr@1.3.0\")\n```\n:::\n\n\n## `separate_*()` family of functions\n\nA new family of `separate_*()` functions supersedes `separate()`, `separate_rows()`, and `extract()`.\n\n::: panel-tabset\n\n## Before\n\n|                                  | Make columns                    | Make rows         |\n|----------------------------|----------------------|-----------------------|\n| Separate with delimiter          | `separate(sep = string)`        | `separate_rows()` |\n| Separate by position             | `separate(sep = integer_vector` | N/A               |\n| Separate with regular expression | `extract()`                     |                   |\n\n## After\n\n|                                  | Make columns                | Make rows                    |\n|----------------------------|----------------------|-----------------------|\n| Separate with delimiter          | `separate_wider_delim()`    | `separate_longer_delim()`    |\n| Separate by position             | `separate_wider_position()` | `separate_longer_position()` |\n| Separate with regular expression | `separate_wider_regex()`    |                              |\n:::\n\nLet's grab some data from the tidyhydat package. The `Date` column is made up of a date in YYYY-MM-DD format and time in  HH:MM:SS format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyhydat)\nlibrary(tidyr)\nlibrary(dplyr)\n\nstation <-\n  realtime_dd(station_number = c(\"01CD005\", \"08MF005\"))\n\nstation\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Queried on: 2023-03-22 03:31:40 (UTC)\n  Date range: 2023-02-20 to 2023-03-22 \n# A tibble: 34,144 × 8\n   STATION_NUMBER PROV_TE…¹ Date                Param…² Value Grade Symbol Code \n   <chr>          <chr>     <dttm>              <chr>   <dbl> <chr> <chr>  <chr>\n 1 01CD005        PE        2023-02-20 04:00:00 Flow    0.31  <NA>  <NA>   1    \n 2 01CD005        PE        2023-02-20 04:05:00 Flow    0.31  <NA>  <NA>   1    \n 3 01CD005        PE        2023-02-20 04:10:00 Flow    0.313 <NA>  <NA>   1    \n 4 01CD005        PE        2023-02-20 04:15:00 Flow    0.31  <NA>  <NA>   1    \n 5 01CD005        PE        2023-02-20 04:20:00 Flow    0.31  <NA>  <NA>   1    \n 6 01CD005        PE        2023-02-20 04:25:00 Flow    0.31  <NA>  <NA>   1    \n 7 01CD005        PE        2023-02-20 04:30:00 Flow    0.31  <NA>  <NA>   1    \n 8 01CD005        PE        2023-02-20 04:35:00 Flow    0.31  <NA>  <NA>   1    \n 9 01CD005        PE        2023-02-20 04:40:00 Flow    0.31  <NA>  <NA>   1    \n10 01CD005        PE        2023-02-20 04:45:00 Flow    0.31  <NA>  <NA>   1    \n# … with 34,134 more rows, and abbreviated variable names ¹​PROV_TERR_STATE_LOC,\n#   ²​Parameter\n```\n:::\n:::\n\n\nUse `separate_wider_position()` to move these into their own columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstation |>\n  select(Date) |>\n  separate_wider_position(Date,\n                          widths = c(ymd = 10, space = 1, hms = 8))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 34,144 × 3\n   ymd        space hms     \n   <chr>      <chr> <chr>   \n 1 2023-02-20 \" \"   04:00:00\n 2 2023-02-20 \" \"   04:05:00\n 3 2023-02-20 \" \"   04:10:00\n 4 2023-02-20 \" \"   04:15:00\n 5 2023-02-20 \" \"   04:20:00\n 6 2023-02-20 \" \"   04:25:00\n 7 2023-02-20 \" \"   04:30:00\n 8 2023-02-20 \" \"   04:35:00\n 9 2023-02-20 \" \"   04:40:00\n10 2023-02-20 \" \"   04:45:00\n# … with 34,134 more rows\n```\n:::\n:::\n\n\nWhat if we don't want the `space` column?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstation |>\n  select(Date) |>\n  separate_wider_position(Date,\n                          widths = c(ymd = 10, hms = 8))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `separate_wider_position()`:\n! Expected 18 characters in each element of `Date`.\n! 34144 values were too long.\nℹ Use `too_many = \"debug\"` to diagnose the problem.\nℹ Use `too_many = \"drop\"` to silence this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstation |>\n  select(Date) |>\n  separate_wider_position(Date,\n                          widths = c(ymd = 10, hms = 8),\n                          too_many = \"debug\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Debug mode activated: adding variables `Date_ok`, `Date_width`, and\n`Date_remainder`.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 34,144 × 6\n   ymd        hms        Date                Date_width Date_remainder Date_ok\n   <chr>      <chr>      <dttm>                   <int> <chr>          <lgl>  \n 1 2023-02-20 \" 04:00:0\" 2023-02-20 04:00:00         19 0              FALSE  \n 2 2023-02-20 \" 04:05:0\" 2023-02-20 04:05:00         19 0              FALSE  \n 3 2023-02-20 \" 04:10:0\" 2023-02-20 04:10:00         19 0              FALSE  \n 4 2023-02-20 \" 04:15:0\" 2023-02-20 04:15:00         19 0              FALSE  \n 5 2023-02-20 \" 04:20:0\" 2023-02-20 04:20:00         19 0              FALSE  \n 6 2023-02-20 \" 04:25:0\" 2023-02-20 04:25:00         19 0              FALSE  \n 7 2023-02-20 \" 04:30:0\" 2023-02-20 04:30:00         19 0              FALSE  \n 8 2023-02-20 \" 04:35:0\" 2023-02-20 04:35:00         19 0              FALSE  \n 9 2023-02-20 \" 04:40:0\" 2023-02-20 04:40:00         19 0              FALSE  \n10 2023-02-20 \" 04:45:0\" 2023-02-20 04:45:00         19 0              FALSE  \n# … with 34,134 more rows\n```\n:::\n:::\n\n\nUse `NA` if there are components that you don't want to appear in the output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstation_split <-\n  station |>\n  select(Date) |>\n  separate_wider_position(Date,\n                          widths = c(ymd = 10, 1, hms = 8))\n\nstation_split\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 34,144 × 2\n   ymd        hms     \n   <chr>      <chr>   \n 1 2023-02-20 04:00:00\n 2 2023-02-20 04:05:00\n 3 2023-02-20 04:10:00\n 4 2023-02-20 04:15:00\n 5 2023-02-20 04:20:00\n 6 2023-02-20 04:25:00\n 7 2023-02-20 04:30:00\n 8 2023-02-20 04:35:00\n 9 2023-02-20 04:40:00\n10 2023-02-20 04:45:00\n# … with 34,134 more rows\n```\n:::\n:::\n\n\nUse `separate_wider_delim()` to break things further down:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstation_split |>\n  separate_wider_delim(ymd,\n                       delim = \"-\",\n                       names = c(\"year\", \"month\", \"day\")) |>\n  separate_wider_delim(hms,\n                       delim = \":\",\n                       names = c(\"hour\", \"minute\", \"second\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 34,144 × 6\n   year  month day   hour  minute second\n   <chr> <chr> <chr> <chr> <chr>  <chr> \n 1 2023  02    20    04    00     00    \n 2 2023  02    20    04    05     00    \n 3 2023  02    20    04    10     00    \n 4 2023  02    20    04    15     00    \n 5 2023  02    20    04    20     00    \n 6 2023  02    20    04    25     00    \n 7 2023  02    20    04    30     00    \n 8 2023  02    20    04    35     00    \n 9 2023  02    20    04    40     00    \n10 2023  02    20    04    45     00    \n# … with 34,134 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstations <- \n  tidyhydat::hy_monthly_levels()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}