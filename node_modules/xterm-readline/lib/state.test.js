"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const highlight_1 = require("./highlight");
const history_1 = require("./history");
const state_1 = require("./state");
const tty_1 = require("./tty");
const PROMPT = "> ";
class Output {
    constructor() {
        this.output = [];
        this.write = jest.fn((text) => this.output.push(text));
        this.print = jest.fn((text) => this.output.push(text));
        this.println = jest.fn((text) => this.output.push(text));
    }
}
test("edit insert push", () => {
    const out = new Output();
    const tty = new tty_1.Tty(80, 24, 8, out);
    const state = new state_1.State(PROMPT, tty, new highlight_1.IdentityHighlighter(), new history_1.History(50));
    state.editInsert("a");
    state.editInsert("b");
    state.editInsert("c");
    expect(state.buffer()).toBe("abc");
    expect(out.write).toHaveBeenNthCalledWith(1, "a");
    expect(out.write).toHaveBeenNthCalledWith(2, "b");
    expect(out.write).toHaveBeenNthCalledWith(3, "c");
});
test("edit insert", () => {
    const out = new Output();
    const tty = new tty_1.Tty(80, 24, 8, out);
    const state = new state_1.State(PROMPT, tty, new highlight_1.IdentityHighlighter(), new history_1.History(50));
    state.editInsert("a");
    state.editInsert("b");
    state.editInsert("c");
    state.moveCursorBack(1);
    state.editInsert("d");
    expect(state.buffer()).toBe("abdc");
});
test("edit insert wrap", () => {
    const out = new Output();
    const tty = new tty_1.Tty(5, 24, 8, out);
    const state = new state_1.State(PROMPT, tty, new highlight_1.IdentityHighlighter(), new history_1.History(50));
    state.editInsert("a");
    state.editInsert("b");
    state.editInsert("c");
    state.editInsert("d");
    expect(state.buffer()).toBe("abcd");
    expect(out.write).toHaveBeenNthCalledWith(1, "a");
    expect(out.write).toHaveBeenNthCalledWith(2, "b");
    expect(out.write).toHaveBeenNthCalledWith(3, "c");
    expect(out.write).toHaveBeenNthCalledWith(4, "d");
    out.write.mockClear();
    state.editInsert("e");
    expect(state.buffer()).toBe("abcde");
    expect(out.write).toHaveBeenNthCalledWith(1, "\r\x1B[0K");
    expect(out.write).toHaveBeenNthCalledWith(2, "> ");
    expect(out.write).toHaveBeenNthCalledWith(3, "abcde");
    expect(out.write).toHaveBeenNthCalledWith(4, "\r\x1B[2C");
});
test("edit multiline backcursor", () => {
    const out = new Output();
    const tty = new tty_1.Tty(5, 24, 8, out);
    const state = new state_1.State(PROMPT, tty, new highlight_1.IdentityHighlighter(), new history_1.History(50));
    state.editInsert("a");
    state.editInsert("\n");
    state.editInsert("b");
    state.editInsert("\n");
    state.editInsert("c");
    state.moveCursorBack(1);
    state.moveCursorBack(1);
    state.editInsert("d");
    state.editBackspace(1);
    expect(state.buffer()).toBe("a\nb\nc");
});
test("cursor arrow movement", () => {
    const out = new Output();
    const tty = new tty_1.Tty(5, 24, 8, out);
    const state = new state_1.State(PROMPT, tty, new highlight_1.IdentityHighlighter(), new history_1.History(50));
    state.editInsert("abc\ndef\nghi");
    state.moveCursorBack(1);
    state.moveCursorUp(1);
    state.editInsert("z");
    expect(state.buffer()).toEqual("abc\ndezf\nghi");
    state.moveCursorForward(1);
    state.moveCursorDown(1);
    state.editInsert("y");
    expect(state.buffer()).toEqual("abc\ndezf\nghiy");
});
//# sourceMappingURL=state.test.js.map