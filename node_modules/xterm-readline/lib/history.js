"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.History = void 0;
class History {
    constructor(maxEntries) {
        this.entries = [];
        this.cursor = -1;
        this.maxEntries = maxEntries;
    }
    saveToLocalStorage() {
        const localStorage = window === null || window === void 0 ? void 0 : window.localStorage;
        if (localStorage !== undefined) {
            localStorage.setItem("history", JSON.stringify(this.entries));
        }
    }
    restoreFromLocalStorage() {
        const localStorage = window === null || window === void 0 ? void 0 : window.localStorage;
        if (localStorage !== undefined) {
            const historyJson = localStorage.getItem("history");
            if (historyJson === undefined || historyJson === null) {
                return;
            }
            try {
                const historyEntries = JSON.parse(historyJson);
                if (!Array.isArray(historyEntries) ||
                    historyEntries.find((it) => typeof it !== "string") !== undefined) {
                    this.entries = [];
                    localStorage.setItem("history", "[]");
                }
                else {
                    this.entries = historyEntries;
                }
            }
            catch (e) {
                this.entries = [];
                localStorage.setItem("history", "[]");
            }
        }
    }
    append(text) {
        this.resetCursor();
        if (!this.entries.includes(text)) {
            this.entries.unshift(text);
        }
        else {
            this.entries.splice(this.entries.indexOf(text), 1);
            this.entries.unshift(text);
        }
        if (this.entries.length > this.maxEntries) {
            this.entries.pop();
        }
        this.saveToLocalStorage();
    }
    resetCursor() {
        this.cursor = -1;
    }
    next() {
        if (this.cursor === -1) {
            return undefined;
        }
        else {
            this.cursor -= 1;
        }
        return this.entries[this.cursor];
    }
    prev() {
        if (this.cursor + 1 >= this.entries.length) {
            return undefined;
        }
        else {
            this.cursor += 1;
        }
        return this.entries[this.cursor];
    }
}
exports.History = History;
//# sourceMappingURL=history.js.map