{
  "version": 3,
  "sources": ["../src/webR/compat.ts", "../src/webR/utils.ts", "../src/webR/chan/task-common.ts", "../src/webR/chan/message.ts", "../src/webR/chan/task-main.ts", "../src/webR/chan/queue.ts", "../src/webR/payload.ts", "../src/webR/chan/channel.ts", "../src/webR/chan/task-worker.ts", "../src/webR/emscripten.ts", "../src/webR/chan/channel-shared.ts", "../src/webR/chan/channel-service.ts", "../src/webR/chan/channel-common.ts", "../src/webR/config.ts", "../src/webR/robj-main.ts", "../src/webR/robj.ts", "../src/webR/utils-r.ts", "../src/webR/robj-worker.ts", "../src/webR/proxy.ts", "../src/console/console.ts", "../src/webR/webr-main.ts"],
  "sourcesContent": ["interface Process {\n  browser: string | undefined;\n  release: { [key: string]: string };\n}\ndeclare let process: Process;\n\nexport const IN_NODE =\n  typeof process !== 'undefined' &&\n  process.release &&\n  process.release.name === 'node' &&\n  typeof process.browser === 'undefined';\n\n// Adapted from https://github.com/pyodide/pyodide/blob/main/src/js/compat.ts\nexport let loadScript: (url: string) => Promise<void>;\nif (globalThis.document) {\n  loadScript = (url) =>\n    new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = url;\n      script.onload = () => resolve();\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n} else if (globalThis.importScripts) {\n  loadScript = async (url) => {\n    try {\n      globalThis.importScripts(url);\n    } catch (e) {\n      if (e instanceof TypeError) {\n        await import(url);\n      } else {\n        throw e;\n      }\n    }\n  };\n} else if (IN_NODE) {\n  loadScript = async (url: string) => {\n    const nodePathMod = (await import('path')).default;\n    await import(nodePathMod.resolve(url));\n  };\n} else {\n  throw new Error('Cannot determine runtime environment');\n}\n", "import { IN_NODE } from './compat';\n\nexport type ResolveFn = (_value?: unknown) => void;\nexport type RejectFn = (_reason?: any) => void;\n\nexport function promiseHandles() {\n  const out = {\n    resolve: (_value?: unknown) => {},\n    reject: (_reason?: any) => {},\n    promise: null as unknown as Promise<unknown>,\n  };\n\n  const promise = new Promise((resolve, reject) => {\n    out.resolve = resolve;\n    out.reject = reject;\n  });\n  out.promise = promise;\n\n  return out;\n}\n\nexport function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function replaceInObject<T>(\n  obj: T | T[],\n  test: (obj: any) => boolean,\n  replacer: (obj: any, ...replacerArgs: any[]) => unknown,\n  ...replacerArgs: unknown[]\n): T | T[] {\n  if (obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n  if (test(obj)) {\n    return replacer(obj, ...replacerArgs) as T;\n  }\n  if (Array.isArray(obj) || ArrayBuffer.isView(obj)) {\n    return (obj as unknown[]).map((v) =>\n      replaceInObject(v, test, replacer, ...replacerArgs)\n    ) as T[];\n  }\n  return Object.fromEntries(\n    Object.entries(obj).map(([k, v], i) => [k, replaceInObject(v, test, replacer, ...replacerArgs)])\n  ) as T;\n}\n\n/* Workaround for loading a cross-origin script.\n *\n * When fetching a worker script, the fetch is required by the spec to\n * use \"same-origin\" mode. This is to avoid loading a worker with a\n * cross-origin global scope, which can allow for a cross-origin\n * restriction bypass.\n *\n * When the fetch URL begins with 'http', we assume the request is\n * cross-origin. We download the content of the URL using a XHR first,\n * create a blob URL containing the requested content, then load the\n * blob URL as a script.\n *\n * The origin of a blob URL is the same as that of the environment that\n * created the URL, and so the global scope of the resulting worker is\n * no longer cross-origin. In that case, the cross-origin restriction\n * bypass is not possible, and the script is permitted to be loaded.\n */\nexport function newCrossOriginWorker(url: string, cb: (worker: Worker) => void): void {\n  const req = new XMLHttpRequest();\n  req.open('get', url, true);\n  req.onload = () => {\n    const worker = new Worker(URL.createObjectURL(new Blob([req.responseText])));\n    cb(worker);\n  };\n  req.send();\n}\n\nexport function isCrossOrigin(urlString: string) {\n  if (IN_NODE) return false;\n  const url1 = new URL(location.href);\n  const url2 = new URL(urlString, location.origin);\n  if (url1.host === url2.host && url1.port === url2.port && url1.protocol === url2.protocol) {\n    return false;\n  }\n  return true;\n}\n\nexport function throwUnreachable(context?: string) {\n  let msg = 'Reached the unreachable';\n  msg = msg + (context ? ': ' + context : '.');\n\n  throw new Error(msg);\n}\n", "// Original code from Synclink and Comlink. Released under Apache 2.0.\n\nexport const SZ_BUF_DOESNT_FIT = 0;\nexport const SZ_BUF_FITS_IDX = 1;\nexport const SZ_BUF_SIZE_IDX = 0;\n\nexport interface Endpoint extends EventSource {\n  postMessage(message: any, transfer?: Transferable[]): void;\n  start?: () => void;\n}\n\nexport interface EventSource {\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: {}): void;\n\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: {}\n  ): void;\n}\n\nexport function toWireValue(value: any): [any, Transferable[]] {\n  return [value, transferCache.get(value) || []];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport type UUID = string;\n\nexport function isUUID(x: any): x is UUID {\n  return typeof x === 'string' && x.length === UUID_LENGTH;\n}\n\nexport const UUID_LENGTH = 63;\n\nexport function generateUUID(): UUID {\n  const result = Array.from({ length: 4 }, randomSegment).join('-');\n  if (result.length !== UUID_LENGTH) {\n    throw new Error('comlink internal error: UUID has the wrong length');\n  }\n  return result;\n}\n\nfunction randomSegment() {\n  let result = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16);\n  const pad = 15 - result.length;\n  if (pad > 0) {\n    result = Array.from({ length: pad }, () => 0).join('') + result;\n  }\n  return result;\n}\n", "/**\n * WebR communication channel messaging and request types.\n * @module Message\n */\nimport { generateUUID, transfer, UUID } from './task-common';\n\n/** A webR communication channel message. */\nexport interface Message {\n  type: string;\n  data?: any;\n}\n\n/** A webR communication channel request. */\nexport interface Request {\n  type: 'request';\n  data: {\n    uuid: UUID;\n    msg: Message;\n  };\n}\n\n/** A webR communication channel response. */\nexport interface Response {\n  type: 'response';\n  data: {\n    uuid: UUID;\n    resp: unknown;\n  };\n}\n\n/** @internal */\nexport function newRequest(msg: Message, transferables?: [Transferable]): Request {\n  return newRequestResponseMessage(\n    {\n      type: 'request',\n      data: {\n        uuid: generateUUID(),\n        msg: msg,\n      },\n    },\n    transferables\n  );\n}\n\n/** @internal */\nexport function newResponse(uuid: UUID, resp: unknown, transferables?: [Transferable]): Response {\n  return newRequestResponseMessage(\n    {\n      type: 'response',\n      data: {\n        uuid,\n        resp,\n      },\n    },\n    transferables\n  );\n}\n\n/** @internal */\nfunction newRequestResponseMessage<T>(msg: T, transferables?: [Transferable]): T {\n  // Signal to Synclink that the data contains objects we wish to\n  // transfer, as in `postMessage()`\n  if (transferables) {\n    transfer(msg, transferables);\n  }\n  return msg;\n}\n\n/** A webR communication channel sync-request.\n * @internal\n */\nexport interface SyncRequest {\n  type: 'sync-request';\n  data: {\n    msg: Message;\n    reqData: SyncRequestData;\n  };\n}\n\n/** Transfer data required when using sync-request with SharedArrayBuffer.\n * @internal */\nexport interface SyncRequestData {\n  taskId?: number;\n  sizeBuffer: Int32Array;\n  signalBuffer: Int32Array;\n  dataBuffer: Uint8Array;\n}\n\n/** @internal */\nexport function newSyncRequest(msg: Message, data: SyncRequestData): SyncRequest {\n  return {\n    type: 'sync-request',\n    data: { msg, reqData: data },\n  };\n}\n\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder('utf-8');\n\n/**\n * Encode data for transfering from worker thread to main thread.\n * @param {any} data The message data to be serialised and encoded.\n * @return {Uint8Array} The encoded data.\n * @internal\n * */\nexport function encodeData(data: any): Uint8Array {\n  // TODO: Pass a `replacer` function\n  return encoder.encode(JSON.stringify(data));\n}\n\n/**\n * Decode data that has been transferred from worker thread to main thread.\n * @param {any} data The message data to be decoded.\n * @return {unknown} The data after decoding.\n * @internal\n * */\nexport function decodeData(data: Uint8Array): unknown {\n  return JSON.parse(decoder.decode(data)) as unknown;\n}\n", "// Original code from Synclink and Comlink. Released under Apache 2.0.\n\nimport { Endpoint, SZ_BUF_FITS_IDX, SZ_BUF_SIZE_IDX, generateUUID } from './task-common';\n\nimport { sleep } from '../utils';\nimport { SyncRequestData, encodeData } from './message';\n\nimport { IN_NODE } from '../compat';\nimport type { Worker as NodeWorker } from 'worker_threads';\n\nconst encoder = new TextEncoder();\n\n/**\n * Respond to a blocking request. Most of the work has already been done in\n * asynclink, we are just responsible here for getting the return value back to\n * the requester through this slightly convoluted Atomics protocol.\n *\n * @param {Endpoint} endpoint  A message port to receive messages from. Other\n *        thread is blocked, so we can't send messages back.\n * @param {SyncRequestData} data The message that was recieved. We will use it\n *        to read out the buffers to write the answer into. NOTE: requester\n *        owns buffers.\n * @param {any} response The value we want to send back to the requester. We\n *        have to encode it into data_buffer.\n */\nexport async function syncResponse(endpoint: Endpoint, data: SyncRequestData, response: any) {\n  try {\n    let { taskId, sizeBuffer, dataBuffer, signalBuffer } = data;\n    // console.warn(msg);\n\n    const bytes = encodeData(response);\n    const fits = bytes.length <= dataBuffer.length;\n\n    Atomics.store(sizeBuffer, SZ_BUF_SIZE_IDX, bytes.length);\n    Atomics.store(sizeBuffer, SZ_BUF_FITS_IDX, +fits);\n    if (!fits) {\n      // console.log(\"      need larger buffer\", taskId)\n      // Request larger buffer\n      const [uuid, dataPromise] = requestResponseMessage(endpoint);\n\n      // Write UUID into dataBuffer so syncRequest knows where to respond to.\n      dataBuffer.set(encoder.encode(uuid));\n      await signalRequester(signalBuffer, taskId!);\n\n      // Wait for response with new bigger dataBuffer\n      dataBuffer = (await dataPromise).dataBuffer as Uint8Array;\n    }\n\n    // Encode result into dataBuffer\n    dataBuffer.set(bytes);\n    Atomics.store(sizeBuffer, SZ_BUF_FITS_IDX, +true);\n\n    // console.log(\"       signaling completion\", taskId)\n    await signalRequester(signalBuffer, taskId as number);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nfunction requestResponseMessage(ep: Endpoint): [string, Promise<any>] {\n  const id = generateUUID();\n  return [\n    id,\n    new Promise((resolve) => {\n      if (IN_NODE) {\n        (ep as unknown as NodeWorker).once('message', (message: any) => {\n          if (!message.id || message.id !== id) {\n            return;\n          }\n          resolve(message);\n        });\n      } else {\n        ep.addEventListener('message', function l(ev: MessageEvent) {\n          if (!ev.data || !ev.data.id || ev.data.id !== id) {\n            return;\n          }\n          ep.removeEventListener('message', l as EventListenerOrEventListenerObject);\n          resolve(ev.data);\n        } as EventListenerOrEventListenerObject);\n      }\n      if (ep.start) {\n        ep.start();\n      }\n    }),\n  ];\n}\n\nasync function signalRequester(signalBuffer: Int32Array, taskId: number) {\n  const index = (taskId >> 1) % 32;\n  let sleepTime = 1;\n  while (Atomics.compareExchange(signalBuffer, index + 1, 0, taskId) !== 0) {\n    // No Atomics.asyncWait except on Chrome =(\n    await sleep(sleepTime);\n    if (sleepTime < 32) {\n      // exponential backoff\n      sleepTime *= 2;\n    }\n  }\n  Atomics.or(signalBuffer, 0, 1 << index);\n  Atomics.notify(signalBuffer, 0);\n}\n", "// From https://stackoverflow.com/questions/47157428/how-to-implement-a-pseudo-blocking-async-queue-in-js-ts\n/**\n * @module Queue\n */\n\n/**\n * Asynchronous queue mechanism to be used by the communication channels.\n * @typeParam T The type of item to be stored in the queue.\n */\nexport class AsyncQueue<T> {\n  #promises: Promise<T>[];\n  #resolvers: ((t: T) => void)[];\n\n  constructor() {\n    this.#resolvers = [];\n    this.#promises = [];\n  }\n\n  put(t: T) {\n    if (!this.#resolvers.length) {\n      this.#add();\n    }\n    const resolve = this.#resolvers.shift()!;\n    resolve(t);\n  }\n\n  async get() {\n    if (!this.#promises.length) {\n      this.#add();\n    }\n    const promise = this.#promises.shift()!;\n    return promise;\n  }\n\n  isEmpty() {\n    return !this.#promises.length;\n  }\n\n  isBlocked() {\n    return !!this.#resolvers.length;\n  }\n\n  get length() {\n    return this.#promises.length - this.#resolvers.length;\n  }\n\n  #add() {\n    this.#promises.push(\n      new Promise((resolve) => {\n        this.#resolvers.push(resolve);\n      })\n    );\n  }\n}\n", "/**\n * Types containing references to R objects, raw data or errors over the webR\n * communication channel.\n * @module Payload\n */\nimport { WebRDataRaw, RPtr, RType } from './robj';\n\nexport type WebRPayloadRaw = {\n  obj: WebRDataRaw;\n  payloadType: 'raw';\n};\n\nexport type WebRPayloadPtr = {\n  obj: {\n    type?: RType;\n    ptr: RPtr;\n    methods?: string[];\n  };\n  payloadType: 'ptr';\n};\n\nexport type WebRPayloadErr = {\n  obj: {\n    message: string;\n    name: string;\n    stack?: string;\n  };\n  payloadType: 'err';\n};\n\n// On the main side we shouldn't see any error payload as these are\n// rethrown as JS exceptions\nexport type WebRPayload = WebRPayloadRaw | WebRPayloadPtr;\nexport type WebRPayloadWorker = WebRPayloadRaw | WebRPayloadPtr | WebRPayloadErr;\n\n/* @internal */\nexport function webRPayloadError(payload: WebRPayloadErr): Error {\n  const e = new Error(payload.obj.message);\n  e.name = payload.obj.name;\n  e.stack = payload.obj.stack;\n  return e;\n}\n\n/**\n * Test for an WebRPayload instance.\n *\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is an instance of an WebRPayload.\n */\nexport function isWebRPayload(value: any): value is WebRPayload {\n  return value && typeof value === 'object' && 'payloadType' in value && 'obj' in value;\n}\n\n/**\n * Test for an WebRPayloadPtr instance.\n *\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is an instance of an WebRPayloadPtr.\n */\nexport function isWebRPayloadPtr(value: any): value is WebRPayloadPtr {\n  return isWebRPayload(value) && value.payloadType === 'ptr';\n}\n\n/**\n * Test for an WebRPayloadRaw instance.\n *\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is an instance of an WebRPayloadRaw.\n */\nexport function isWebRPayloadRaw(value: any): value is WebRPayloadRaw {\n  return isWebRPayload(value) && value.payloadType === 'raw';\n}\n", "/**\n * Interfaces for the webR main and worker thread communication channels.\n * @module Channel\n */\n\nimport { promiseHandles, ResolveFn, RejectFn } from '../utils';\nimport { AsyncQueue } from './queue';\nimport { Message, newRequest, Response } from './message';\nimport { WebRPayload, WebRPayloadWorker, webRPayloadError } from '../payload';\n\n// The channel structure is asymetric:\n//\n// - The main thread maintains the input and output queues. All\n//   messages sent from main are stored in the input queue. The input\n//   queue is pull-based, it's the worker that initiates a transfer\n//   via a sync-request.\n//\n//   The output queue is filled at the initiative of the worker. The\n//   main thread asynchronously reads from this queue, typically in an\n//   async infloop.\n//\n// - The worker synchronously reads from the input queue. Reading a\n//   message blocks until an input is available. Writing a message to\n//   the output queue is equivalent to calling `postMessage()` and\n//   returns immediately.\n//\n//   Note that the messages sent from main to worker need to be\n//   serialised. There is no structured cloning involved, and\n//   ArrayBuffers can't be transferred, only copied.\n\nexport abstract class ChannelMain {\n  inputQueue = new AsyncQueue<Message>();\n  outputQueue = new AsyncQueue<Message>();\n\n  #parked = new Map<string, { resolve: ResolveFn; reject: RejectFn }>();\n\n  abstract initialised: Promise<unknown>;\n  abstract close(): void;\n  abstract interrupt(): void;\n\n  async read(): Promise<Message> {\n    return await this.outputQueue.get();\n  }\n\n  async flush(): Promise<Message[]> {\n    const msg: Message[] = [];\n    while (!this.outputQueue.isEmpty()) {\n      msg.push(await this.read());\n    }\n    return msg;\n  }\n\n  write(msg: Message): void {\n    this.inputQueue.put(msg);\n  }\n\n  async request(msg: Message, transferables?: [Transferable]): Promise<WebRPayload> {\n    const req = newRequest(msg, transferables);\n\n    const { resolve, reject, promise } = promiseHandles();\n    this.#parked.set(req.data.uuid, { resolve, reject });\n\n    this.write(req);\n    return promise as Promise<WebRPayload>;\n  }\n\n  protected resolveResponse(msg: Response) {\n    const uuid = msg.data.uuid;\n    const handles = this.#parked.get(uuid);\n\n    if (handles) {\n      const payload = msg.data.resp as WebRPayloadWorker;\n      this.#parked.delete(uuid);\n\n      if (payload.payloadType === 'err') {\n        handles.reject(webRPayloadError(payload));\n      } else {\n        handles.resolve(payload);\n      }\n    } else {\n      console.warn(\"Can't find request.\");\n    }\n  }\n}\n\nexport interface ChannelWorker {\n  resolve(): void;\n  write(msg: Message, transfer?: [Transferable]): void;\n  read(): Message;\n  handleInterrupt(): void;\n  setInterrupt(interrupt: () => void): void;\n  run(args: string[]): void;\n  inputOrDispatch: () => number;\n  setDispatchHandler: (dispatch: (msg: Message) => void) => void;\n}\n", "// Original code from Synclink and Comlink. Released under Apache 2.0.\n\nimport {\n  Endpoint,\n  SZ_BUF_DOESNT_FIT,\n  SZ_BUF_FITS_IDX,\n  SZ_BUF_SIZE_IDX,\n  UUID_LENGTH,\n} from './task-common';\n\nimport { newSyncRequest, Message, decodeData } from './message';\n\nconst decoder = new TextDecoder('utf-8');\n\nexport class SyncTask {\n  endpoint: Endpoint;\n  msg: Message;\n  transfers: Transferable[];\n\n  #scheduled = false;\n  #resolved: boolean;\n  #result?: any;\n  #exception?: any;\n\n  // sync only\n  taskId?: number;\n  #syncGen?: Generator<void, unknown, void>;\n  sizeBuffer?: Int32Array;\n  signalBuffer?: Int32Array;\n  syncifier = new _Syncifier();\n\n  constructor(endpoint: Endpoint, msg: Message, transfers: Transferable[] = []) {\n    this.endpoint = endpoint;\n    this.msg = msg;\n    this.transfers = transfers;\n    this.#resolved = false;\n  }\n\n  scheduleSync() {\n    if (this.#scheduled) {\n      return;\n    }\n    this.#scheduled = true;\n\n    this.syncifier.scheduleTask(this);\n    this.#syncGen = this.doSync();\n    this.#syncGen.next();\n    return this;\n  }\n\n  poll() {\n    if (!this.#scheduled) {\n      throw new Error('Task not synchronously scheduled');\n    }\n\n    const { done, value } = this.#syncGen!.next();\n    if (!done) {\n      return false;\n    }\n\n    this.#resolved = true;\n    this.#result = value;\n\n    return true;\n  }\n\n  *doSync() {\n    // just use syncRequest.\n    const { endpoint, msg, transfers } = this;\n    const sizeBuffer = new Int32Array(new SharedArrayBuffer(8));\n    const signalBuffer = this.signalBuffer!;\n    const taskId = this.taskId;\n\n    // Ensure status is cleared. We will notify\n    let dataBuffer = acquireDataBuffer(UUID_LENGTH);\n    // console.log(\"===requesting\", taskId);\n\n    const syncMsg = newSyncRequest(msg, {\n      sizeBuffer,\n      dataBuffer,\n      signalBuffer,\n      taskId,\n    });\n\n    endpoint.postMessage(syncMsg, transfers);\n    yield;\n\n    if (Atomics.load(sizeBuffer, SZ_BUF_FITS_IDX) === SZ_BUF_DOESNT_FIT) {\n      // There wasn't enough space, make a bigger dataBuffer.\n      // First read uuid for response out of current dataBuffer\n      const id = decoder.decode(dataBuffer.slice(0, UUID_LENGTH));\n      releaseDataBuffer(dataBuffer);\n      const size = Atomics.load(sizeBuffer, SZ_BUF_SIZE_IDX);\n      dataBuffer = acquireDataBuffer(size);\n      // console.log(\"===bigger data buffer\", taskId);\n      endpoint.postMessage({ id, dataBuffer });\n      yield;\n    }\n\n    const size = Atomics.load(sizeBuffer, SZ_BUF_SIZE_IDX);\n    // console.log(\"===completing\", taskId);\n    return decodeData(dataBuffer.slice(0, size));\n  }\n\n  get result() {\n    if (this.#exception) {\n      throw this.#exception;\n    }\n    // console.log(this.#resolved);\n    if (this.#resolved) {\n      return this.#result as unknown;\n    }\n    throw new Error('Not ready.');\n  }\n\n  syncify(): any {\n    this.scheduleSync();\n    this.syncifier.syncifyTask(this);\n    return this.result;\n  }\n}\n\nclass _Syncifier {\n  nextTaskId: Int32Array;\n  signalBuffer: Int32Array;\n  tasks: Map<number, SyncTask>;\n\n  constructor() {\n    this.nextTaskId = new Int32Array([1]);\n    this.signalBuffer = new Int32Array(new SharedArrayBuffer(32 * 4 + 4));\n    this.tasks = new Map();\n  }\n\n  scheduleTask(task: SyncTask) {\n    task.taskId = this.nextTaskId[0];\n    this.nextTaskId[0] += 2;\n    task.signalBuffer = this.signalBuffer;\n    this.tasks.set(task.taskId, task);\n  }\n\n  waitOnSignalBuffer() {\n    const timeout = 50;\n    for (;;) {\n      const status = Atomics.wait(this.signalBuffer, 0, 0, timeout);\n      switch (status) {\n        case 'ok':\n        case 'not-equal':\n          return;\n        case 'timed-out':\n          if (interruptBuffer[0] !== 0) {\n            handleInterrupt();\n          }\n          break;\n        default:\n          throw new Error('Unreachable');\n      }\n    }\n  }\n\n  *tasksIdsToWakeup() {\n    const flag = Atomics.load(this.signalBuffer, 0);\n    for (let i = 0; i < 32; i++) {\n      const bit = 1 << i;\n      if (flag & bit) {\n        Atomics.and(this.signalBuffer, 0, ~bit);\n        const wokenTask = Atomics.exchange(this.signalBuffer, i + 1, 0);\n        yield wokenTask;\n      }\n    }\n  }\n\n  pollTasks(task?: SyncTask) {\n    let result = false;\n    for (const wokenTaskId of this.tasksIdsToWakeup()) {\n      // console.log(\"poll task\", wokenTaskId, \"looking for\",task);\n      const wokenTask = this.tasks.get(wokenTaskId);\n      if (!wokenTask) {\n        throw new Error(`Assertion error: unknown taskId ${wokenTaskId}.`);\n      }\n      if (wokenTask.poll()) {\n        // console.log(\"completed task \", wokenTaskId, wokenTask, wokenTask._result);\n        this.tasks.delete(wokenTaskId);\n        if (wokenTask === task) {\n          result = true;\n        }\n      }\n    }\n    return result;\n  }\n\n  syncifyTask(task: SyncTask) {\n    for (;;) {\n      this.waitOnSignalBuffer();\n      // console.log(\"syncifyTask:: woke\");\n      if (this.pollTasks(task)) {\n        return;\n      }\n    }\n  }\n}\n\nconst dataBuffers: Uint8Array[][] = [];\n\nfunction acquireDataBuffer(size: number): Uint8Array {\n  const powerof2 = Math.ceil(Math.log2(size));\n  if (!dataBuffers[powerof2]) {\n    dataBuffers[powerof2] = [];\n  }\n  const result = dataBuffers[powerof2].pop();\n  if (result) {\n    result.fill(0);\n    return result;\n  }\n  return new Uint8Array(new SharedArrayBuffer(2 ** powerof2));\n}\n\nfunction releaseDataBuffer(buffer: Uint8Array) {\n  const powerof2 = Math.ceil(Math.log2(buffer.byteLength));\n  dataBuffers[powerof2].push(buffer);\n}\n\nlet interruptBuffer = new Int32Array(new ArrayBuffer(4));\n\nlet handleInterrupt = (): void => {\n  interruptBuffer[0] = 0;\n  throw new Error('Interrupted!');\n};\n\n/**\n * Sets the interrupt handler. This is called when the computation is\n * interrupted. Should zero the interrupt buffer and throw an exception.\n * @internal\n */\nexport function setInterruptHandler(handler: () => void) {\n  handleInterrupt = handler;\n}\n\n/**\n * Sets the interrupt buffer. Should be a shared array buffer. When element 0\n * is set non-zero it signals an interrupt.\n * @internal\n */\nexport function setInterruptBuffer(buffer: ArrayBufferLike) {\n  interruptBuffer = new Int32Array(buffer);\n}\n", "import type { RPtr, RTypeNumber } from './robj';\nimport type { UnwindProtectException } from './utils-r';\n\nexport interface Module extends EmscriptenModule {\n  /* Add mkdirTree to FS namespace, missing from @types/emscripten at the\n   * time of writing.\n   */\n  FS: typeof FS & {\n    mkdirTree(path: string): void;\n  };\n  ENV: { [key: string]: string };\n  LDSO: {\n    loadedLibsByName: { [key: string]: any };\n    loadedLibsByHandle: { [key: number]: any };\n  };\n  monitorRunDependencies: (n: number) => void;\n  noImageDecoding: boolean;\n  noAudioDecoding: boolean;\n  noWasmDecoding: boolean;\n  setPrompt: (prompt: string) => void;\n  canvasExec: (op: string) => void;\n  downloadFileContent: (\n    URL: string,\n    headers: Array<string>\n  ) => {\n    status: number;\n    response: string | ArrayBuffer;\n  };\n  // Exported Emscripten JS API\n  allocateUTF8: typeof allocateUTF8;\n  allocateUTF8OnStack: typeof allocateUTF8OnStack;\n  getValue: typeof getValue;\n  setValue: typeof setValue;\n  UTF8ToString: typeof UTF8ToString;\n  callMain: (args: string[]) => void;\n  // R symbols from Rinternals.h\n  _ATTRIB: (ptr: RPtr) => RPtr;\n  _CAR: (ptr: RPtr) => RPtr;\n  _CDR: (ptr: RPtr) => RPtr;\n  _CLOENV: (ptr: RPtr) => RPtr;\n  _COMPLEX: (ptr: RPtr) => RPtr;\n  _FRAME: (ptr: RPtr) => RPtr;\n  _INTEGER: (ptr: RPtr) => RPtr;\n  _INTERNAL: (ptr: RPtr) => RPtr;\n  _LENGTH: (ptr: RPtr) => number;\n  _LOGICAL: (ptr: RPtr) => RPtr;\n  _PRINTNAME: (ptr: RPtr) => RPtr;\n  _R_CHAR: (ptr: RPtr) => RPtr;\n  _RAW: (ptr: RPtr) => RPtr;\n  _REAL: (ptr: RPtr) => RPtr;\n  _SETCAR: (x: RPtr, y: RPtr) => void;\n  _STRING_ELT: (ptr: RPtr, idx: number) => RPtr;\n  _STRING_PTR: (ptr: RPtr) => RPtr;\n  _SYMVALUE: (ptr: RPtr) => RPtr;\n  _TAG: (ptr: RPtr) => RPtr;\n  _TYPEOF: (ptr: RPtr) => RPtr;\n  _VECTOR_ELT: (ptr: RPtr, idx: number) => RPtr;\n  _R_lsInternal3: (env: RPtr, all: number, sorted: number) => RPtr;\n  _R_MakeExternalPtr: (p: number, tag: RPtr, prot: RPtr) => RPtr;\n  _R_NewEnv: (enclos: RPtr, hash: number, size: number) => RPtr;\n  _R_ParseEvalString: (code: number, env: RPtr) => RPtr;\n  _R_PreserveObject: (ptr: RPtr) => void;\n  _R_ReleaseObject: (ptr: RPtr) => void;\n  _Rf_ScalarReal: (n: number) => RPtr;\n  _Rf_ScalarLogical: (l: number) => RPtr;\n  _Rf_ScalarInteger: (n: number) => RPtr;\n  _Rf_ScalarString: (s: string) => RPtr;\n  _Rf_allocList: (len: number) => RPtr;\n  _Rf_allocVector: (type: RTypeNumber, len: number) => RPtr;\n  _Rf_defineVar: (symbol: RPtr, value: RPtr, env: RPtr) => void;\n  _Rf_error: (msg: EmPtr) => void;\n  _Rf_eval: (call: RPtr, env: RPtr) => RPtr;\n  _Rf_findVarInFrame: (rho: RPtr, symbol: RPtr) => RPtr;\n  _Rf_listAppend: (source: RPtr, target: RPtr) => RPtr;\n  _Rf_getAttrib: (ptr1: RPtr, ptr2: RPtr) => RPtr;\n  _Rf_install: (ptr: number) => RPtr;\n  _Rf_installTrChar: (name: RPtr) => RPtr;\n  _Rf_lang1: (ptr1: RPtr) => RPtr;\n  _Rf_lang2: (ptr1: RPtr, ptr2: RPtr) => RPtr;\n  _Rf_lang3: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr) => RPtr;\n  _Rf_lang4: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr, ptr4: RPtr) => RPtr;\n  _Rf_lang5: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr, ptr4: RPtr, ptr5: RPtr) => RPtr;\n  _Rf_lang6: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr, ptr4: RPtr, ptr5: RPtr, ptr6: RPtr) => RPtr;\n  _Rf_mkChar: (ptr: number) => RPtr;\n  _Rf_mkString: (ptr: number) => RPtr;\n  _Rf_onintr: () => void;\n  _Rf_protect: (ptr: RPtr) => RPtr;\n  _R_ContinueUnwind: (cont: RPtr) => never;\n  _R_ProtectWithIndex: (ptr1: RPtr, ptr2: RPtr) => void;\n  _R_Reprotect: (ptr1: RPtr, ptr2: RPtr) => void;\n  _Rf_setAttrib: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr) => RPtr;\n  _Rf_unprotect: (n: number) => void;\n  _Rf_unprotect_ptr: (ptr: RPtr) => void;\n  _R_BaseEnv: RPtr;\n  _R_BracketSymbol: RPtr;\n  _R_Bracket2Symbol: RPtr;\n  _R_DollarSymbol: RPtr;\n  _R_EmptyEnv: RPtr;\n  _R_FalseValue: RPtr;\n  _R_GlobalEnv: RPtr;\n  _R_Interactive: RPtr;\n  _R_NaInt: RPtr;\n  _R_NaReal: RPtr;\n  _R_NaString: RPtr;\n  _R_LogicalNAValue: RPtr;\n  _R_NilValue: RPtr;\n  _R_TrueValue: RPtr;\n  _R_NamesSymbol: RPtr;\n  _R_UnboundValue: RPtr;\n  _SET_STRING_ELT: (ptr: RPtr, idx: number, val: RPtr) => void;\n  _SET_VECTOR_ELT: (ptr: RPtr, idx: number, val: RPtr) => void;\n  // TODO: Namespace all webR properties\n  webr: {\n    UnwindProtectException: typeof UnwindProtectException;\n    readConsole: () => number;\n    resolveInit: () => void;\n    handleEvents: () => void;\n    evalJs: (code: RPtr) => number;\n  };\n}\n\nexport const Module = {} as Module;\n\ntype EmPtr = ReturnType<typeof Module.allocateUTF8>;\n\nexport interface DictEmPtrs {\n  [key: string]: EmPtr;\n}\n\nexport function dictEmFree(dict: { [key: string | number]: EmPtr }) {\n  Object.keys(dict).forEach((key) => Module._free(dict[key]));\n}\n", "import { promiseHandles, newCrossOriginWorker, isCrossOrigin } from '../utils';\nimport { Message, Response, SyncRequest } from './message';\nimport { Endpoint } from './task-common';\nimport { syncResponse } from './task-main';\nimport { ChannelMain, ChannelWorker } from './channel';\nimport { ChannelType } from './channel-common';\nimport { WebROptions } from '../webr-main';\n\nimport { IN_NODE } from '../compat';\nimport type { Worker as NodeWorker } from 'worker_threads';\nif (IN_NODE) {\n  (globalThis as any).Worker = require('worker_threads').Worker as NodeWorker;\n}\n\n// Main ----------------------------------------------------------------\n\nexport class SharedBufferChannelMain extends ChannelMain {\n  #interruptBuffer?: Int32Array;\n\n  initialised: Promise<unknown>;\n  resolve: (_?: unknown) => void;\n  close = () => {};\n\n  constructor(config: Required<WebROptions>) {\n    super();\n    const initWorker = (worker: Worker) => {\n      this.#handleEventsFromWorker(worker);\n      this.close = () => worker.terminate();\n      const msg = {\n        type: 'init',\n        data: { config, channelType: ChannelType.SharedArrayBuffer },\n      } as Message;\n      worker.postMessage(msg);\n    };\n\n    if (isCrossOrigin(config.WEBR_URL)) {\n      newCrossOriginWorker(`${config.WEBR_URL}webr-worker.js`, (worker: Worker) =>\n        initWorker(worker)\n      );\n    } else {\n      const worker = new Worker(`${config.WEBR_URL}webr-worker.js`);\n      initWorker(worker);\n    }\n\n    ({ resolve: this.resolve, promise: this.initialised } = promiseHandles());\n  }\n\n  interrupt() {\n    if (!this.#interruptBuffer) {\n      throw new Error('Failed attempt to interrupt before initialising interruptBuffer');\n    }\n    this.#interruptBuffer[0] = 1;\n  }\n\n  #handleEventsFromWorker(worker: Worker) {\n    if (IN_NODE) {\n      (worker as unknown as NodeWorker).on('message', (message: Message) => {\n        this.#onMessageFromWorker(worker, message);\n      });\n    } else {\n      worker.onmessage = (ev: MessageEvent) =>\n        this.#onMessageFromWorker(worker, ev.data as Message);\n    }\n  }\n\n  #onMessageFromWorker = async (worker: Worker, message: Message) => {\n    if (!message || !message.type) {\n      return;\n    }\n\n    switch (message.type) {\n      case 'resolve':\n        this.#interruptBuffer = new Int32Array(message.data as SharedArrayBuffer);\n        this.resolve();\n        return;\n\n      case 'response':\n        this.resolveResponse(message as Response);\n        return;\n\n      default:\n        this.outputQueue.put(message);\n        return;\n\n      case 'sync-request': {\n        const msg = message as SyncRequest;\n        const payload = msg.data.msg;\n        const reqData = msg.data.reqData;\n\n        switch (payload.type) {\n          case 'read': {\n            const response = await this.inputQueue.get();\n            await syncResponse(worker, reqData, response);\n            break;\n          }\n          default:\n            throw new TypeError(`Unsupported request type '${payload.type}'.`);\n        }\n        return;\n      }\n      case 'request':\n        throw new TypeError(\n          \"Can't send messages of type 'request' from a worker. Please Use 'sync-request' instead.\"\n        );\n    }\n  };\n}\n\n// Worker --------------------------------------------------------------\n\nimport { SyncTask, setInterruptHandler, setInterruptBuffer } from './task-worker';\nimport { Module } from '../emscripten';\n\nexport class SharedBufferChannelWorker implements ChannelWorker {\n  #ep: Endpoint;\n  #dispatch: (msg: Message) => void = () => 0;\n  #interruptBuffer = new Int32Array(new SharedArrayBuffer(4));\n  #interrupt = () => {};\n\n  constructor() {\n    this.#ep = (IN_NODE ? require('worker_threads').parentPort : globalThis) as Endpoint;\n    setInterruptBuffer(this.#interruptBuffer.buffer);\n    setInterruptHandler(() => this.handleInterrupt());\n  }\n\n  resolve() {\n    this.write({ type: 'resolve', data: this.#interruptBuffer.buffer });\n  }\n\n  write(msg: Message, transfer?: [Transferable]) {\n    this.#ep.postMessage(msg, transfer);\n  }\n\n  read(): Message {\n    const msg = { type: 'read' } as Message;\n    const task = new SyncTask(this.#ep, msg);\n    return task.syncify() as Message;\n  }\n\n  inputOrDispatch(): number {\n    for (;;) {\n      const msg = this.read();\n      if (msg.type === 'stdin') {\n        return Module.allocateUTF8(msg.data as string);\n      }\n      this.#dispatch(msg);\n    }\n  }\n\n  run(args: string[]) {\n    Module.callMain(args);\n  }\n\n  setInterrupt(interrupt: () => void) {\n    this.#interrupt = interrupt;\n  }\n\n  handleInterrupt() {\n    if (this.#interruptBuffer[0] !== 0) {\n      this.#interruptBuffer[0] = 0;\n      this.#interrupt();\n    }\n  }\n\n  setDispatchHandler(dispatch: (msg: Message) => void) {\n    this.#dispatch = dispatch;\n  }\n}\n", "import { promiseHandles, newCrossOriginWorker, isCrossOrigin } from '../utils';\nimport {\n  Message,\n  newRequest,\n  Response,\n  Request,\n  newResponse,\n  encodeData,\n  decodeData,\n} from './message';\nimport { Endpoint } from './task-common';\nimport { ChannelMain, ChannelWorker } from './channel';\nimport { ChannelType } from './channel-common';\nimport { WebROptions } from '../webr-main';\n\nimport { IN_NODE } from '../compat';\nimport type { Worker as NodeWorker } from 'worker_threads';\nif (IN_NODE) {\n  (globalThis as any).Worker = require('worker_threads').Worker as NodeWorker;\n}\n\n// Main ----------------------------------------------------------------\n\nexport class ServiceWorkerChannelMain extends ChannelMain {\n  initialised: Promise<unknown>;\n\n  resolve: (_?: unknown) => void;\n  close = () => {};\n\n  #syncMessageCache = new Map<string, Message>();\n  #registration?: ServiceWorkerRegistration;\n  #interrupted = false;\n\n  constructor(config: Required<WebROptions>) {\n    super();\n    const initWorker = (worker: Worker) => {\n      this.#handleEventsFromWorker(worker);\n      this.close = () => worker.terminate();\n      this.#registerServiceWorker(`${config.SW_URL}webr-serviceworker.js`).then((clientId) => {\n        const msg = {\n          type: 'init',\n          data: {\n            config,\n            channelType: ChannelType.ServiceWorker,\n            clientId,\n            location: window.location.href,\n          },\n        } as Message;\n        worker.postMessage(msg);\n      });\n    };\n\n    if (isCrossOrigin(config.SW_URL)) {\n      newCrossOriginWorker(`${config.SW_URL}webr-worker.js`, (worker: Worker) =>\n        initWorker(worker)\n      );\n    } else {\n      const worker = new Worker(`${config.SW_URL}webr-worker.js`);\n      initWorker(worker);\n    }\n\n    ({ resolve: this.resolve, promise: this.initialised } = promiseHandles());\n  }\n\n  activeRegistration(): ServiceWorker {\n    if (!this.#registration?.active) {\n      throw new Error('Attempted to obtain a non-existent active registration.');\n    }\n    return this.#registration.active;\n  }\n\n  interrupt() {\n    this.#interrupted = true;\n  }\n\n  async #registerServiceWorker(url: string): Promise<string> {\n    // Register service worker\n    this.#registration = await navigator.serviceWorker.register(url);\n    await navigator.serviceWorker.ready;\n    window.addEventListener('beforeunload', () => {\n      this.#registration?.unregister();\n    });\n\n    // Ensure we can communicate with service worker and we have a client ID\n    const clientId = await new Promise<string>((resolve) => {\n      navigator.serviceWorker.addEventListener(\n        'message',\n        function listener(event: MessageEvent<{ type: string; clientId: string }>) {\n          if (event.data.type === 'registration-successful') {\n            navigator.serviceWorker.removeEventListener('message', listener);\n            resolve(event.data.clientId);\n          }\n        }\n      );\n      this.activeRegistration().postMessage({ type: 'register-client-main' });\n    });\n\n    // Setup listener for service worker messages\n    navigator.serviceWorker.addEventListener('message', (event: MessageEvent<Request>) => {\n      this.#onMessageFromServiceWorker(event);\n    });\n    return clientId;\n  }\n\n  async #onMessageFromServiceWorker(event: MessageEvent<Message>) {\n    if (event.data.type === 'request') {\n      const uuid = event.data.data as string;\n      const message = this.#syncMessageCache.get(uuid);\n      if (!message) {\n        throw new Error('Request not found during service worker XHR request');\n      }\n      this.#syncMessageCache.delete(uuid);\n      switch (message.type) {\n        case 'read': {\n          const response = await this.inputQueue.get();\n          this.activeRegistration().postMessage({\n            type: 'wasm-webr-fetch-response',\n            uuid: uuid,\n            response: newResponse(uuid, response),\n          });\n          break;\n        }\n        case 'interrupt': {\n          const response = this.#interrupted;\n          this.activeRegistration().postMessage({\n            type: 'wasm-webr-fetch-response',\n            uuid: uuid,\n            response: newResponse(uuid, response),\n          });\n          this.#interrupted = false;\n          break;\n        }\n        default:\n          throw new TypeError(`Unsupported request type '${message.type}'.`);\n      }\n      return;\n    }\n  }\n\n  #handleEventsFromWorker(worker: Worker) {\n    if (IN_NODE) {\n      (worker as unknown as NodeWorker).on('message', (message: Message) => {\n        this.#onMessageFromWorker(worker, message);\n      });\n    } else {\n      worker.onmessage = (ev: MessageEvent) =>\n        this.#onMessageFromWorker(worker, ev.data as Message);\n    }\n  }\n\n  #onMessageFromWorker = async (worker: Worker, message: Message) => {\n    if (!message || !message.type) {\n      return;\n    }\n\n    switch (message.type) {\n      case 'resolve':\n        this.resolve();\n        return;\n\n      case 'response':\n        this.resolveResponse(message as Response);\n        return;\n\n      default:\n        this.outputQueue.put(message);\n        return;\n\n      case 'sync-request': {\n        const request = message.data as Request;\n        this.#syncMessageCache.set(request.data.uuid, request.data.msg);\n        return;\n      }\n\n      case 'request':\n        throw new TypeError(\n          \"Can't send messages of type 'request' from a worker.\" +\n            'Use service worker fetch request instead.'\n        );\n    }\n  };\n}\n\n// Worker --------------------------------------------------------------\n\nimport { Module } from '../emscripten';\n\nexport class ServiceWorkerChannelWorker implements ChannelWorker {\n  #ep: Endpoint;\n  #mainThreadId: string;\n  #location: string;\n  #dispatch: (msg: Message) => void = () => 0;\n  #interrupt = () => {};\n  onMessageFromMainThread: (msg: Message) => void = () => {};\n\n  constructor(data: { clientId?: string; location?: string }) {\n    if (!data.clientId || !data.location) {\n      throw Error(\"Can't start service worker channel\");\n    }\n    this.#mainThreadId = data.clientId;\n    this.#location = data.location;\n    this.#ep = (IN_NODE ? require('worker_threads').parentPort : globalThis) as Endpoint;\n  }\n\n  resolve() {\n    this.write({ type: 'resolve' });\n  }\n\n  write(msg: Message, transfer?: [Transferable]) {\n    this.#ep.postMessage(msg, transfer);\n  }\n\n  syncRequest(message: Message): Response {\n    /*\n     * Browsers timeout service workers after about 5 minutes on inactivity.\n     * See e.g. service_worker_version.cc in Chromium.\n     *\n     * To avoid the service worker being shut down, we timeout our XHR after\n     * 1 minute and then resend the request as a keep-alive. The service worker\n     * uses the message UUID to identify the request and continue waiting for a\n     * response from where it left off.\n     */\n    const request = newRequest(message);\n    this.write({ type: 'sync-request', data: request });\n\n    let retryCount = 0;\n    for (;;) {\n      try {\n        const url = new URL('__wasm__/webr-fetch-request/', this.#location);\n        const xhr = new XMLHttpRequest();\n        xhr.timeout = 60000;\n        xhr.responseType = 'arraybuffer';\n        xhr.open('POST', url, false);\n        const fetchReqBody = {\n          clientId: this.#mainThreadId,\n          uuid: request.data.uuid,\n        };\n        xhr.send(encodeData(fetchReqBody));\n        return decodeData(new Uint8Array(xhr.response as ArrayBuffer)) as Response;\n      } catch (e: any) {\n        if (e instanceof DOMException && retryCount++ < 1000) {\n          console.log('Service worker request failed - resending request');\n        } else {\n          throw e;\n        }\n      }\n    }\n  }\n\n  read(): Message {\n    const response = this.syncRequest({ type: 'read' });\n    return response.data.resp as Message;\n  }\n\n  inputOrDispatch(): number {\n    for (;;) {\n      const msg = this.read();\n      if (msg.type === 'stdin') {\n        return Module.allocateUTF8(msg.data as string);\n      }\n      this.#dispatch(msg);\n    }\n  }\n\n  run(args: string[]) {\n    Module.callMain(args);\n  }\n\n  setInterrupt(interrupt: () => void) {\n    this.#interrupt = interrupt;\n  }\n\n  handleInterrupt() {\n    /* During R computation we have no way to directly interrupt the worker\n     * thread. Instead, we hook into R's PolledEvents. Since we are not using\n     * SharedArrayBuffer as a signal method, we instead send a message to the\n     * main thread to ask if we should interrupt R.\n     */\n    const response = this.syncRequest({ type: 'interrupt' });\n    const interrupted = response.data.resp as boolean;\n    if (interrupted) {\n      this.#interrupt();\n    }\n  }\n\n  setDispatchHandler(dispatch: (msg: Message) => void) {\n    this.#dispatch = dispatch;\n  }\n}\n", "import { SharedBufferChannelMain, SharedBufferChannelWorker } from './channel-shared';\nimport { ServiceWorkerChannelMain, ServiceWorkerChannelWorker } from './channel-service';\nimport { WebROptions } from '../webr-main';\nimport { isCrossOrigin } from '../utils';\nimport { IN_NODE } from '../compat';\n\n// This file refers to objects imported from `./channel-shared` and\n// `./channel-service.` These can't be included in `./channel` as this\n// causes a circular dependency issue.\n\nexport const ChannelType = {\n  Automatic: 0,\n  SharedArrayBuffer: 1,\n  ServiceWorker: 2,\n} as const;\n\nexport type ChannelInitMessage = {\n  type: string;\n  data: {\n    config: Required<WebROptions>;\n    channelType: Exclude<\n      (typeof ChannelType)[keyof typeof ChannelType],\n      typeof ChannelType.Automatic\n    >;\n    clientId?: string;\n    location?: string;\n  };\n};\n\nexport function newChannelMain(data: Required<WebROptions>) {\n  switch (data.channelType) {\n    case ChannelType.SharedArrayBuffer:\n      return new SharedBufferChannelMain(data);\n    case ChannelType.ServiceWorker:\n      return new ServiceWorkerChannelMain(data);\n    case ChannelType.Automatic:\n    default:\n      if (IN_NODE || crossOriginIsolated) {\n        return new SharedBufferChannelMain(data);\n      }\n      /*\n       * TODO: If we are not cross-origin isolated but we can still use service\n       * workers, we could setup a service worker to inject the relevant headers\n       * to enable cross-origin isolation.\n       */\n      if ('serviceWorker' in navigator && !isCrossOrigin(data.SW_URL)) {\n        return new ServiceWorkerChannelMain(data);\n      }\n      throw new Error(\"Can't initialise main thread communication channel\");\n  }\n}\n\nexport function newChannelWorker(msg: ChannelInitMessage) {\n  switch (msg.data.channelType) {\n    case ChannelType.SharedArrayBuffer:\n      return new SharedBufferChannelWorker();\n    case ChannelType.ServiceWorker:\n      return new ServiceWorkerChannelWorker(msg.data);\n    default:\n      throw new Error('Unknown worker channel type recieved');\n  }\n}\n", "export const BASE_URL = 'https://webr.r-wasm.org/v0.1.0/';\nexport const PKG_BASE_URL = 'https://repo.r-wasm.org';\n", "/**\n * Module for working with R objects on the main thead through\n * JavaScript proxies. The `RObject` types in `RMain` are aliases for\n * proxies to the corresponding types in `RWorker`. For instance,\n * `RMain.RCharacter` is an alias for `RMain.RProxy<RWorker.RCharacter>`.\n * The proxies automatically and asynchronously forward method and\n * getter calls to the implementations on the R worker side.\n * @module RMain\n */\nimport type { RProxy } from './proxy';\nimport { isWebRPayloadPtr } from './payload';\nimport * as RWorker from './robj-worker';\n\n// RProxy<RWorker.RObject> type aliases\nexport type RObject = RProxy<RWorker.RObject>;\nexport type RNull = RProxy<RWorker.RNull>;\nexport type RSymbol = RProxy<RWorker.RSymbol>;\nexport type RPairlist = RProxy<RWorker.RPairlist>;\nexport type REnvironment = RProxy<RWorker.REnvironment>;\nexport type RString = RProxy<RWorker.RString>;\nexport type RLogical = RProxy<RWorker.RLogical>;\nexport type RInteger = RProxy<RWorker.RInteger>;\nexport type RDouble = RProxy<RWorker.RDouble>;\nexport type RComplex = RProxy<RWorker.RComplex>;\nexport type RCharacter = RProxy<RWorker.RCharacter>;\nexport type RList = RProxy<RWorker.RList>;\nexport type RRaw = RProxy<RWorker.RRaw>;\nexport type RCall = RProxy<RWorker.RCall>;\n// RFunction proxies are callable\nexport type RFunction = RProxy<RWorker.RFunction> & ((...args: unknown[]) => Promise<unknown>);\n\n/**\n * Test for an RObject instance\n *\n * RObject is the user facing interface to R objects.\n *\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is an instance of an RObject.\n */\nexport function isRObject(value: any): value is RObject {\n  return (\n    value &&\n    (typeof value === 'object' || typeof value === 'function') &&\n    'payloadType' in value &&\n    isWebRPayloadPtr(value._payload)\n  );\n}\n\n/**\n * Test for an RFunction instance\n *\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is an instance of an RFunction.\n */\nexport function isRFunction(value: any): value is RFunction {\n  return Boolean(isRObject(value) && value._payload.obj.methods?.includes('exec'));\n}\n", "/**\n * Common module for working with R objects.\n * @module RObject\n */\nimport * as RMain from './robj-main';\nimport * as RWorker from './robj-worker';\n\nexport type RPtr = number;\n\nexport const RTypeMap = {\n  null: 0,\n  symbol: 1,\n  pairlist: 2,\n  closure: 3,\n  environment: 4,\n  promise: 5,\n  call: 6,\n  special: 7,\n  builtin: 8,\n  string: 9,\n  logical: 10,\n  integer: 13,\n  double: 14,\n  complex: 15,\n  character: 16,\n  dots: 17,\n  any: 18,\n  list: 19,\n  expression: 20,\n  bytecode: 21,\n  pointer: 22,\n  weakref: 23,\n  raw: 24,\n  s4: 25,\n  new: 30,\n  free: 31,\n  function: 99,\n} as const;\nexport type RType = keyof typeof RTypeMap;\nexport type RTypeNumber = (typeof RTypeMap)[keyof typeof RTypeMap];\n\nexport type Complex = {\n  re: number;\n  im: number;\n};\n\nexport type WebRDataRaw =\n  | number\n  | string\n  | boolean\n  | undefined\n  | null\n  | void\n  | Complex\n  | Error\n  | ArrayBuffer\n  | ArrayBufferView\n  | Array<WebRDataRaw>\n  | Map<WebRDataRaw, WebRDataRaw>\n  | Set<WebRDataRaw>\n  | { [key: string]: WebRDataRaw };\n\nexport type NamedEntries<T> = [string | null, T][];\nexport type NamedObject<T> = { [key: string]: T };\n\n/**\n * A union of JavaScript types that are able to be converted into an R object.\n *\n * `WebRData` is used both as a general input argument for R object construction\n * and also as a general return type when converting R objects into JavaScript.\n *\n */\nexport type WebRData =\n  | RMain.RObject\n  | RWorker.RObjectBase\n  | RWorker.RObject\n  | WebRDataRaw\n  | WebRDataJs\n  | WebRData[]\n  | { [key: string]: WebRData };\n\n/**\n * A subset of {@link WebRData} for JavaScript objects that can be converted\n * into R atomic vectors.\n *\n * @typeParam T The JavaScript scalar type associated with the atomic vector.\n */\nexport type WebRDataAtomic<T> =\n  | WebRDataScalar<T>\n  | (T | null)[]\n  | WebRDataJsAtomic<T>\n  | NamedObject<T | null>;\n\n/**\n * `WebRDataJs` objects form a tree structure, used when serialising R objects\n * into a JavaScript respresentation.\n *\n * Nested R objects are serialised using the {@link WebRDataJsNode} type,\n * forming branches in the resulting tree structure, with leaves formed by the\n * remaining types.\n */\nexport type WebRDataJs =\n  | WebRDataJsNull\n  | WebRDataJsString\n  | WebRDataJsSymbol\n  | WebRDataJsNode\n  | WebRDataJsAtomic<RWorker.atomicType>;\n\nexport type WebRDataJsNull = {\n  type: 'null';\n};\n\nexport type WebRDataJsString = {\n  type: 'string';\n  value: string;\n};\n\nexport type WebRDataJsSymbol = {\n  type: 'symbol';\n  printname: string | null;\n  symvalue: RPtr | null;\n  internal: RPtr | null;\n};\n\nexport type WebRDataJsNode = {\n  type: 'list' | 'pairlist' | 'environment';\n  names: (string | null)[] | null;\n  values: (WebRDataRaw | RWorker.RObject | RMain.RObject | WebRDataJs)[];\n};\n\nexport type WebRDataJsAtomic<T> = {\n  type: 'logical' | 'integer' | 'double' | 'complex' | 'character' | 'raw';\n  names: (string | null)[] | null;\n  values: (T | null)[];\n};\n\n/**\n * Test for a {@link WebRDataJs} instance.\n *\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is an instance of a {@link WebRDataJs}.\n */\nexport function isWebRDataJs(value: any): value is WebRDataJs {\n  return value && typeof value === 'object' && Object.keys(RTypeMap).includes(value.type as string);\n}\n\n/**\n * A subset of WebRData for scalar JavaScript objects.\n */\nexport type WebRDataScalar<T> = T | RMain.RObject | RWorker.RObjectBase;\n\n/**\n * Test if an object is of type {@link Complex}.\n *\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is of type {@link Complex}.\n */\nexport function isComplex(value: any): value is Complex {\n  return value && typeof value === 'object' && 're' in value && 'im' in value;\n}\n", "import { Module, DictEmPtrs, dictEmFree } from './emscripten';\nimport { WebRData, RPtr } from './robj';\nimport { RObject, REnvironment, RHandle, handlePtr } from './robj-worker';\n\nexport function protect<T extends RHandle>(x: T): T {\n  Module._Rf_protect(handlePtr(x));\n  return x;\n}\n\nexport function protectInc<T extends RHandle>(x: T, prot: { n: number }): T {\n  Module._Rf_protect(handlePtr(x));\n  ++prot.n;\n  return x;\n}\n\nexport function protectWithIndex(x: RHandle): { loc: number; ptr: RPtr } {\n  // Integer size hardcoded to 4 bytes. This is fine but is there a\n  // way to call sizeof?\n  const pLoc = Module._malloc(4);\n\n  Module._R_ProtectWithIndex(handlePtr(x), pLoc);\n  const loc = Module.getValue(pLoc, 'i32');\n\n  return { loc: loc, ptr: pLoc };\n}\n\nexport function unprotectIndex(index: { ptr: RPtr }): void {\n  Module._Rf_unprotect(1);\n  Module._free(index.ptr);\n}\n\nexport function reprotect<T extends RHandle>(x: T, index: { loc: number; ptr: RPtr }): T {\n  Module._R_Reprotect(handlePtr(x), index.loc);\n  return x;\n}\n\nexport function unprotect(n: number) {\n  Module._Rf_unprotect(n);\n}\n\n// rlang convention: `env`-prefixed functions consistently take `env`\n// as first argument\nexport function envPoke(env: RHandle, sym: RHandle, value: RHandle) {\n  Module._Rf_defineVar(handlePtr(sym), handlePtr(value), handlePtr(env));\n}\n\nexport function parseEvalBare(code: string, env: WebRData): RObject {\n  const strings: DictEmPtrs = {};\n  const prot = { n: 0 };\n\n  try {\n    const envObj = new REnvironment(env);\n    protectInc(envObj, prot);\n\n    strings.code = Module.allocateUTF8(code);\n\n    const out = Module._R_ParseEvalString(strings.code, envObj.ptr);\n    return RObject.wrap(out);\n  } finally {\n    dictEmFree(strings);\n    unprotect(prot.n);\n  }\n}\n\nexport class UnwindProtectException extends Error {\n  cont: RPtr;\n  constructor(message: string, cont: RPtr) {\n    super(message);\n    this.name = 'UnwindProtectException';\n    this.cont = cont;\n  }\n}\n\nexport function safeEval(call: RHandle, env: RHandle): RPtr {\n  return Module.LDSO.loadedLibsByName['/usr/lib/R/library/webr/libs/webr.so'].module.ffi_safe_eval(\n    handlePtr(call),\n    handlePtr(env)\n  );\n}\n", "/**\n * Module for working with R objects on the worker thead.\n * @module RWorker\n */\nimport { Module } from './emscripten';\nimport { Complex, isComplex, NamedEntries, NamedObject, WebRDataRaw, WebRDataScalar } from './robj';\nimport { WebRData, WebRDataAtomic, RPtr, RType, RTypeMap, RTypeNumber } from './robj';\nimport { isWebRDataJs, WebRDataJs, WebRDataJsAtomic, WebRDataJsNode } from './robj';\nimport { WebRDataJsNull, WebRDataJsString, WebRDataJsSymbol } from './robj';\nimport { envPoke, parseEvalBare, protect, protectInc, unprotect } from './utils-r';\nimport { protectWithIndex, reprotect, unprotectIndex, safeEval } from './utils-r';\nimport { ShelterID, isShelterID } from './webr-chan';\n\nexport type RHandle = RObject | RPtr;\n\nexport function handlePtr(x: RHandle): RPtr {\n  if (isRObject(x)) {\n    return x.ptr;\n  } else {\n    return x;\n  }\n}\n\n// Throw if an R object does not match a certain R type\nfunction assertRType(obj: RObjectBase, type: RType) {\n  if (Module._TYPEOF(obj.ptr) !== RTypeMap[type]) {\n    throw new Error(`Unexpected object type \"${obj.type()}\" when expecting type \"${type}\"`);\n  }\n}\n\n// TODO: Shelter should be a dictionary not an array\nexport const shelters = new Map<ShelterID, RPtr[]>();\n\n// Use this for implicit protection of objects sent to the main\n// thread. Currently uses the precious list but could use a different\n// mechanism in the future. Unprotection is explicit through\n// `Shelter.destroy()`.\nexport function keep(shelter: ShelterID, x: RHandle) {\n  const ptr = handlePtr(x);\n  Module._R_PreserveObject(ptr);\n\n  // TODO: Remove when shelter transition is complete\n  if (shelter === undefined) {\n    return;\n  }\n\n  if (isShelterID(shelter)) {\n    shelters.get(shelter)!.push(ptr);\n    return;\n  }\n\n  throw new Error('Unexpected shelter type ' + typeof shelter);\n}\n\n// Frees objects preserved with `keep()`. This method is called by\n// users in the main thread to release objects that were automatically\n// protected before being sent away.\nexport function destroy(shelter: ShelterID, x: RHandle) {\n  const ptr = handlePtr(x);\n  Module._R_ReleaseObject(ptr);\n\n  const objs: RPtr[] = shelters.get(shelter)!;\n  const loc = objs.indexOf(ptr);\n\n  if (loc < 0) {\n    throw new Error(\"Can't find object in shelter.\");\n  }\n\n  objs.splice(loc, 1);\n}\n\nexport function purge(shelter: ShelterID) {\n  const ptrs: RPtr[] = shelters.get(shelter)!;\n\n  for (const ptr of ptrs) {\n    try {\n      Module._R_ReleaseObject(ptr);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  shelters.set(shelter, []);\n}\n\nexport interface ToJsOptions {\n  depth: number;\n}\n\nexport type Nullable<T> = T | RNull;\n\nfunction newObjectFromData(obj: WebRData): RObject {\n  // Conversion of WebRDataJs type JS objects\n  if (isWebRDataJs(obj)) {\n    return new (getRWorkerClass(RTypeMap[obj.type]))(obj);\n  }\n\n  // Conversion of explicit R NULL value\n  if (obj && typeof obj === 'object' && 'type' in obj && obj.type === 'null') {\n    return new RNull();\n  }\n\n  // Direct conversion of scalar JS values\n  if (obj === null) {\n    return new RLogical({ type: 'logical', names: null, values: [null] });\n  }\n  if (typeof obj === 'boolean') {\n    return new RLogical(obj);\n  }\n  if (typeof obj === 'number') {\n    return new RDouble(obj);\n  }\n  if (typeof obj === 'string') {\n    return new RCharacter(obj);\n  }\n  if (isComplex(obj)) {\n    return new RComplex(obj);\n  }\n  if (Array.isArray(obj)) {\n    return newObjectFromArray(obj);\n  }\n\n  throw new Error('Robj construction for this JS object is not yet supported');\n}\n\n// JS arrays are interpreted using R's c() function, so as to match\n// R's built in coercion rules\nfunction newObjectFromArray(arr: WebRData[]) {\n  const prot = { n: 0 };\n\n  try {\n    const call = new RCall([new RSymbol('c'), ...arr]);\n    protectInc(call, prot);\n    return call.eval();\n  } finally {\n    unprotect(prot.n);\n  }\n}\n\nexport class RObjectBase {\n  ptr: RPtr;\n  constructor(ptr: RPtr) {\n    this.ptr = ptr;\n  }\n\n  type(): RType {\n    const typeNumber = Module._TYPEOF(this.ptr) as RTypeNumber;\n    const type = Object.keys(RTypeMap).find(\n      (typeName) => RTypeMap[typeName as RType] === typeNumber\n    );\n    return type as RType;\n  }\n}\n\nexport class RObject extends RObjectBase {\n  constructor(data: WebRData) {\n    if (!(data instanceof RObjectBase)) {\n      return newObjectFromData(data);\n    }\n\n    super(data.ptr);\n  }\n\n  static wrap<T extends typeof RObject>(this: T, ptr: RPtr): InstanceType<T> {\n    const type = Module._TYPEOF(ptr);\n    return new (getRWorkerClass(type as RTypeNumber))(new RObjectBase(ptr)) as InstanceType<T>;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `RObject:${this.type()}`;\n  }\n\n  /** @internal */\n  static getPersistentObject(prop: keyof typeof objs): unknown {\n    return objs[prop];\n  }\n\n  /** @internal */\n  getPropertyValue(prop: keyof this): unknown {\n    return this[prop];\n  }\n\n  inspect(): void {\n    parseEvalBare('.Internal(inspect(x))', { x: this });\n  }\n\n  isNull(): this is RNull {\n    return Module._TYPEOF(this.ptr) === RTypeMap.null;\n  }\n\n  isUnbound(): boolean {\n    return this.ptr === objs.unboundValue.ptr;\n  }\n\n  attrs(): Nullable<RPairlist> {\n    return RPairlist.wrap(Module._ATTRIB(this.ptr));\n  }\n\n  setNames(values: (string | null)[] | null): this {\n    let namesObj: RObject;\n\n    if (values === null) {\n      namesObj = objs.null;\n    } else if (Array.isArray(values) && values.every((v) => typeof v === 'string' || v === null)) {\n      namesObj = new RCharacter(values);\n    } else {\n      throw new Error('Argument to setNames must be null or an Array of strings or null');\n    }\n\n    // `setAttrib()` protects its inputs\n    Module._Rf_setAttrib(this.ptr, objs.namesSymbol.ptr, namesObj.ptr);\n    return this;\n  }\n\n  names(): (string | null)[] | null {\n    const names = RCharacter.wrap(Module._Rf_getAttrib(this.ptr, objs.namesSymbol.ptr));\n    if (names.isNull()) {\n      return null;\n    } else {\n      return names.toArray();\n    }\n  }\n\n  includes(name: string) {\n    const names = this.names();\n    return names && names.includes(name);\n  }\n\n  toJs(options: ToJsOptions = { depth: 0 }, depth = 1): WebRDataJs {\n    throw new Error('This R object cannot be converted to JS');\n  }\n\n  subset(prop: number | string): RObject {\n    return this.#slice(prop, objs.bracketSymbol.ptr);\n  }\n\n  get(prop: number | string): RObject {\n    return this.#slice(prop, objs.bracket2Symbol.ptr);\n  }\n\n  getDollar(prop: string): RObject {\n    return this.#slice(prop, objs.dollarSymbol.ptr);\n  }\n\n  #slice(prop: number | string, op: RPtr): RObject {\n    const prot = { n: 0 };\n\n    try {\n      const idx = new RObject(prop);\n      protectInc(idx, prot);\n\n      const call = Module._Rf_lang3(op, this.ptr, idx.ptr);\n      protectInc(call, prot);\n\n      return RObject.wrap(safeEval(call, objs.baseEnv));\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  pluck(...path: (string | number)[]): RObject | undefined {\n    const index = protectWithIndex(objs.null);\n\n    try {\n      const getter = (obj: RObject, prop: string | number): RObject => {\n        const out = obj.get(prop);\n        return reprotect(out, index);\n      };\n      const result = path.reduce(getter, this);\n\n      return result.isNull() ? undefined : result;\n    } finally {\n      unprotectIndex(index);\n    }\n  }\n\n  set(prop: string | number, value: RObject | WebRDataRaw): RObject {\n    const prot = { n: 0 };\n\n    try {\n      const idx = new RObject(prop);\n      protectInc(idx, prot);\n\n      const valueObj = new RObject(value);\n      protectInc(valueObj, prot);\n\n      const assign = new RSymbol('[[<-');\n      const call = Module._Rf_lang4(assign.ptr, this.ptr, idx.ptr, valueObj.ptr);\n      protectInc(call, prot);\n\n      return RObject.wrap(safeEval(call, objs.baseEnv));\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  /** @internal */\n  static getMethods(obj: RObject) {\n    const props = new Set<string>();\n    let cur: unknown = obj;\n    do {\n      Object.getOwnPropertyNames(cur).map((p) => props.add(p));\n    } while ((cur = Object.getPrototypeOf(cur)));\n    return [...props.keys()].filter((i) => typeof obj[i as keyof typeof obj] === 'function');\n  }\n}\n\nexport class RNull extends RObject {\n  constructor() {\n    super(new RObjectBase(Module.getValue(Module._R_NilValue, '*')));\n    return this;\n  }\n\n  toJs(): WebRDataJsNull {\n    return { type: 'null' };\n  }\n}\n\nexport class RSymbol extends RObject {\n  // Note that symbols don't need to be protected. This also means\n  // that allocating symbols in loops with random data is probably a\n  // bad idea because this leaks memory.\n  constructor(x: WebRDataScalar<string>) {\n    if (x instanceof RObjectBase) {\n      assertRType(x, 'symbol');\n      super(x);\n      return;\n    }\n    const name = Module.allocateUTF8(x as string);\n    try {\n      super(new RObjectBase(Module._Rf_install(name)));\n    } finally {\n      Module._free(name);\n    }\n  }\n\n  toJs(): WebRDataJsSymbol {\n    const obj = this.toObject();\n    return {\n      type: 'symbol',\n      printname: obj.printname,\n      symvalue: obj.symvalue,\n      internal: obj.internal,\n    };\n  }\n\n  toObject(): {\n    printname: string | null;\n    symvalue: RPtr | null;\n    internal: RPtr | null;\n  } {\n    return {\n      printname: this.printname().isUnbound() ? null : this.printname().toString(),\n      symvalue: this.symvalue().isUnbound() ? null : this.symvalue().ptr,\n      internal: this.internal().isNull() ? null : this.internal().ptr,\n    };\n  }\n\n  toString(): string {\n    return this.printname().toString();\n  }\n\n  printname(): RString {\n    return RString.wrap(Module._PRINTNAME(this.ptr));\n  }\n  symvalue(): RObject {\n    return RObject.wrap(Module._SYMVALUE(this.ptr));\n  }\n  internal(): RObject {\n    return RObject.wrap(Module._INTERNAL(this.ptr));\n  }\n}\n\nexport class RPairlist extends RObject {\n  constructor(val: WebRData) {\n    if (val instanceof RObjectBase) {\n      assertRType(val, 'pairlist');\n      super(val);\n      return this;\n    }\n\n    const prot = { n: 0 };\n\n    try {\n      const { names, values } = toWebRData(val);\n\n      const list = RPairlist.wrap(Module._Rf_allocList(values.length));\n      protectInc(list, prot);\n\n      for (\n        let [i, next] = [0, list as Nullable<RPairlist>];\n        !next.isNull();\n        [i, next] = [i + 1, next.cdr()]\n      ) {\n        next.setcar(new RObject(values[i]));\n      }\n\n      list.setNames(names);\n      super(list);\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  get length(): number {\n    return this.toArray().length;\n  }\n\n  toArray(options: ToJsOptions = { depth: 1 }): WebRData[] {\n    return this.toJs(options).values;\n  }\n\n  toObject({\n    allowDuplicateKey = true,\n    allowEmptyKey = false,\n    depth = 1,\n  } = {}): NamedObject<WebRData> {\n    const entries = this.entries({ depth });\n    const keys = entries.map(([k, v]) => k);\n    if (!allowDuplicateKey && new Set(keys).size !== keys.length) {\n      throw new Error('Duplicate key when converting pairlist without allowDuplicateKey enabled');\n    }\n    if (!allowEmptyKey && keys.some((k) => !k)) {\n      throw new Error('Empty or null key when converting pairlist without allowEmptyKey enabled');\n    }\n    return Object.fromEntries(\n      entries.filter((u, idx) => entries.findIndex((v) => v[0] === u[0]) === idx)\n    );\n  }\n\n  entries(options: ToJsOptions = { depth: 1 }): NamedEntries<WebRData> {\n    const obj = this.toJs(options);\n    return obj.values.map((v, i) => [obj.names ? obj.names[i] : null, v]);\n  }\n\n  toJs(options: ToJsOptions = { depth: 0 }, depth = 1): WebRDataJsNode {\n    const namesArray: string[] = [];\n    let hasNames = false;\n    const values: WebRDataJsNode['values'] = [];\n\n    for (let next = this as Nullable<RPairlist>; !next.isNull(); next = next.cdr()) {\n      const symbol = next.tag();\n      if (symbol.isNull()) {\n        namesArray.push('');\n      } else {\n        hasNames = true;\n        namesArray.push(symbol.toString());\n      }\n      if (options.depth && depth >= options.depth) {\n        values.push(next.car());\n      } else {\n        values.push(next.car().toJs(options, depth + 1));\n      }\n    }\n    const names = hasNames ? namesArray : null;\n    return { type: 'pairlist', names, values };\n  }\n\n  includes(name: string): boolean {\n    return name in this.toObject();\n  }\n\n  setcar(obj: RObject): void {\n    Module._SETCAR(this.ptr, obj.ptr);\n  }\n\n  car(): RObject {\n    return RObject.wrap(Module._CAR(this.ptr));\n  }\n\n  cdr(): Nullable<RPairlist> {\n    return RObject.wrap(Module._CDR(this.ptr)) as Nullable<RPairlist>;\n  }\n\n  tag(): Nullable<RSymbol> {\n    return RObject.wrap(Module._TAG(this.ptr)) as Nullable<RSymbol>;\n  }\n}\n\nexport class RCall extends RObject {\n  constructor(val: WebRData) {\n    if (val instanceof RObjectBase) {\n      assertRType(val, 'call');\n      super(val);\n      return this;\n    }\n    const prot = { n: 0 };\n\n    try {\n      const { values } = toWebRData(val);\n      const objs = values.map((value) => protectInc(new RObject(value), prot));\n      const call = RCall.wrap(Module._Rf_allocVector(RTypeMap.call, values.length));\n      protectInc(call, prot);\n\n      for (\n        let [i, next] = [0, call as Nullable<RPairlist>];\n        !next.isNull();\n        [i, next] = [i + 1, next.cdr()]\n      ) {\n        next.setcar(objs[i]);\n      }\n      super(call);\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  setcar(obj: RObject): void {\n    Module._SETCAR(this.ptr, obj.ptr);\n  }\n\n  car(): RObject {\n    return RObject.wrap(Module._CAR(this.ptr));\n  }\n\n  cdr(): Nullable<RPairlist> {\n    return RObject.wrap(Module._CDR(this.ptr)) as Nullable<RPairlist>;\n  }\n\n  eval(): RObject {\n    return RObject.wrap(safeEval(this.ptr, objs.baseEnv));\n  }\n}\n\nexport class RList extends RObject {\n  constructor(val: WebRData) {\n    if (val instanceof RObjectBase) {\n      assertRType(val, 'list');\n      super(val);\n      return this;\n    }\n\n    const prot = { n: 0 };\n\n    try {\n      const { names, values } = toWebRData(val);\n      const ptr = Module._Rf_allocVector(RTypeMap.list, values.length);\n      protectInc(ptr, prot);\n\n      values.forEach((v, i) => {\n        Module._SET_VECTOR_ELT(ptr, i, new RObject(v).ptr);\n      });\n\n      RObject.wrap(ptr).setNames(names);\n\n      super(new RObjectBase(ptr));\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  get length(): number {\n    return Module._LENGTH(this.ptr);\n  }\n\n  toArray(options: { depth: number } = { depth: 1 }): WebRData[] {\n    return this.toJs(options).values;\n  }\n\n  toObject({\n    allowDuplicateKey = true,\n    allowEmptyKey = false,\n    depth = 1,\n  } = {}): NamedObject<WebRData> {\n    const entries = this.entries({ depth });\n    const keys = entries.map(([k, v]) => k);\n    if (!allowDuplicateKey && new Set(keys).size !== keys.length) {\n      throw new Error('Duplicate key when converting list without allowDuplicateKey enabled');\n    }\n    if (!allowEmptyKey && keys.some((k) => !k)) {\n      throw new Error('Empty or null key when converting list without allowEmptyKey enabled');\n    }\n    return Object.fromEntries(\n      entries.filter((u, idx) => entries.findIndex((v) => v[0] === u[0]) === idx)\n    );\n  }\n\n  entries(options: { depth: number } = { depth: 1 }): NamedEntries<WebRData> {\n    const obj = this.toJs(options);\n    return obj.values.map((v, i) => [obj.names ? obj.names[i] : null, v]);\n  }\n\n  toJs(options: { depth: number } = { depth: 0 }, depth = 1): WebRDataJsNode {\n    return {\n      type: 'list',\n      names: this.names(),\n      values: [...Array(this.length).keys()].map((i) => {\n        if (options.depth && depth >= options.depth) {\n          return this.get(i + 1);\n        } else {\n          return this.get(i + 1).toJs(options, depth + 1);\n        }\n      }),\n    };\n  }\n}\n\nexport class RFunction extends RObject {\n  exec(...args: (WebRDataRaw | RObject)[]): RObject {\n    const prot = { n: 0 };\n\n    try {\n      const call = new RCall([this, ...args]);\n      protectInc(call, prot);\n      return call.eval();\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n}\n\nexport class RString extends RObject {\n  // Unlike symbols, strings are not cached and must thus be protected\n  constructor(x: WebRDataScalar<string>) {\n    if (x instanceof RObjectBase) {\n      assertRType(x, 'string');\n      super(x);\n      return;\n    }\n\n    const name = Module.allocateUTF8(x as string);\n\n    try {\n      super(new RObjectBase(Module._Rf_mkChar(name)));\n    } finally {\n      Module._free(name);\n    }\n  }\n\n  toString(): string {\n    return Module.UTF8ToString(Module._R_CHAR(this.ptr));\n  }\n\n  toJs(): WebRDataJsString {\n    return {\n      type: 'string',\n      value: this.toString(),\n    };\n  }\n}\n\nexport class REnvironment extends RObject {\n  constructor(val: WebRData = {}) {\n    if (val instanceof RObjectBase) {\n      assertRType(val, 'environment');\n      super(val);\n      return this;\n    }\n    let nProt = 0;\n\n    try {\n      const { names, values } = toWebRData(val);\n\n      const ptr = protect(Module._R_NewEnv(objs.globalEnv.ptr, 0, 0));\n      ++nProt;\n\n      values.forEach((v, i) => {\n        const name = names ? names[i] : null;\n        if (!name) {\n          throw new Error(\"Can't create object in new environment with empty symbol name\");\n        }\n\n        const sym = new RSymbol(name);\n        const vObj = protect(new RObject(v));\n        try {\n          envPoke(ptr, sym, vObj);\n        } finally {\n          unprotect(1);\n        }\n      });\n\n      super(new RObjectBase(ptr));\n    } finally {\n      unprotect(nProt);\n    }\n  }\n\n  ls(all = false, sorted = true): string[] {\n    const ls = RCharacter.wrap(Module._R_lsInternal3(this.ptr, Number(all), Number(sorted)));\n    return ls.toArray() as string[];\n  }\n\n  bind(name: string, value: WebRData): void {\n    const sym = new RSymbol(name);\n    const valueObj = protect(new RObject(value));\n\n    try {\n      envPoke(this, sym, valueObj);\n    } finally {\n      unprotect(1);\n    }\n  }\n\n  names(): string[] {\n    return this.ls(true, true);\n  }\n\n  frame(): RObject {\n    return RObject.wrap(Module._FRAME(this.ptr));\n  }\n\n  subset(prop: number | string): RObject {\n    if (typeof prop === 'number') {\n      throw new Error('Object of type environment is not subsettable');\n    }\n    return this.getDollar(prop);\n  }\n\n  toObject({ depth = 0 } = {}): NamedObject<WebRData> {\n    const symbols = this.names();\n    return Object.fromEntries(\n      [...Array(symbols.length).keys()].map((i) => {\n        return [symbols[i], this.getDollar(symbols[i]).toJs({ depth })];\n      })\n    );\n  }\n\n  toJs(options: { depth: number } = { depth: 0 }, depth = 1): WebRDataJsNode {\n    const names = this.names();\n    const values = [...Array(names.length).keys()].map((i) => {\n      if (options.depth && depth >= options.depth) {\n        return this.getDollar(names[i]);\n      } else {\n        return this.getDollar(names[i]).toJs(options, depth + 1);\n      }\n    });\n\n    return {\n      type: 'environment',\n      names,\n      values,\n    };\n  }\n}\n\ntype TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\nexport type atomicType = number | boolean | Complex | string;\n\nabstract class RVectorAtomic<T extends atomicType> extends RObject {\n  constructor(\n    val: WebRDataAtomic<T>,\n    kind: RType,\n    newSetter: (ptr: RPtr) => (v: any, i: number) => void\n  ) {\n    if (val instanceof RObjectBase) {\n      assertRType(val, kind);\n      super(val);\n      return this;\n    }\n\n    const prot = { n: 0 };\n\n    try {\n      const { names, values } = toWebRData(val);\n\n      const ptr = Module._Rf_allocVector(RTypeMap[kind], values.length);\n      protectInc(ptr, prot);\n\n      values.forEach(newSetter(ptr));\n      RObject.wrap(ptr).setNames(names);\n\n      super(new RObjectBase(ptr));\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  get length(): number {\n    return Module._LENGTH(this.ptr);\n  }\n\n  get(prop: number | string): this {\n    return super.get(prop) as this;\n  }\n\n  subset(prop: number | string): this {\n    return super.subset(prop) as this;\n  }\n\n  getDollar(prop: string): RObject {\n    throw new Error('$ operator is invalid for atomic vectors');\n  }\n\n  detectMissing(): boolean[] {\n    const prot = { n: 0 };\n\n    try {\n      const call = Module._Rf_lang2(new RSymbol('is.na').ptr, this.ptr);\n      protectInc(call, prot);\n\n      const val = RLogical.wrap(safeEval(call, objs.baseEnv));\n      protectInc(val, prot);\n\n      const ret = val.toTypedArray();\n      return Array.from(ret).map((elt) => Boolean(elt));\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  abstract toTypedArray(): TypedArray;\n\n  toArray(): (T | null)[] {\n    const arr = this.toTypedArray();\n    return this.detectMissing().map((m, idx) => (m ? null : (arr[idx] as T)));\n  }\n\n  toObject({ allowDuplicateKey = true, allowEmptyKey = false } = {}): NamedObject<T | null> {\n    const entries = this.entries();\n    const keys = entries.map(([k, v]) => k);\n    if (!allowDuplicateKey && new Set(keys).size !== keys.length) {\n      throw new Error(\n        'Duplicate key when converting atomic vector without allowDuplicateKey enabled'\n      );\n    }\n    if (!allowEmptyKey && keys.some((k) => !k)) {\n      throw new Error(\n        'Empty or null key when converting atomic vector without allowEmptyKey enabled'\n      );\n    }\n    return Object.fromEntries(\n      entries.filter((u, idx) => entries.findIndex((v) => v[0] === u[0]) === idx)\n    );\n  }\n\n  entries(): NamedEntries<T | null> {\n    const values = this.toArray();\n    const names = this.names();\n    return values.map((v, i) => [names ? names[i] : null, v]);\n  }\n\n  toJs(): WebRDataJsAtomic<T> {\n    return {\n      type: this.type() as 'logical' | 'integer' | 'double' | 'complex' | 'character' | 'raw',\n      names: this.names(),\n      values: this.toArray(),\n    };\n  }\n}\n\nexport class RLogical extends RVectorAtomic<boolean> {\n  constructor(val: WebRDataAtomic<boolean>) {\n    super(val, 'logical', RLogical.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    const data = Module._LOGICAL(ptr);\n    const naLogical = Module.getValue(Module._R_NaInt, 'i32');\n    return (v: null | boolean, i: number) => {\n      Module.setValue(data + 4 * i, v === null ? naLogical : Boolean(v), 'i32');\n    };\n  };\n\n  getBoolean(idx: number): boolean | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toBoolean(): boolean {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getBoolean(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS boolean\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Int32Array {\n    return new Int32Array(\n      Module.HEAP32.subarray(\n        Module._LOGICAL(this.ptr) / 4,\n        Module._LOGICAL(this.ptr) / 4 + this.length\n      )\n    );\n  }\n\n  toArray(): (boolean | null)[] {\n    const arr = this.toTypedArray();\n    return this.detectMissing().map((m, idx) => (m ? null : Boolean(arr[idx])));\n  }\n}\n\nexport class RInteger extends RVectorAtomic<number> {\n  constructor(val: WebRDataAtomic<number>) {\n    super(val, 'integer', RInteger.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    const data = Module._INTEGER(ptr);\n    const naInteger = Module.getValue(Module._R_NaInt, 'i32');\n\n    return (v: null | number, i: number) => {\n      Module.setValue(data + 4 * i, v === null ? naInteger : Math.round(Number(v)), 'i32');\n    };\n  };\n\n  getNumber(idx: number): number | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toNumber(): number {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getNumber(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS number\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Int32Array {\n    return new Int32Array(\n      Module.HEAP32.subarray(\n        Module._INTEGER(this.ptr) / 4,\n        Module._INTEGER(this.ptr) / 4 + this.length\n      )\n    );\n  }\n}\n\nexport class RDouble extends RVectorAtomic<number> {\n  constructor(val: WebRDataAtomic<number>) {\n    super(val, 'double', RDouble.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    const data = Module._REAL(ptr);\n    const naDouble = Module.getValue(Module._R_NaReal, 'double');\n\n    return (v: null | number, i: number) => {\n      Module.setValue(data + 8 * i, v === null ? naDouble : v, 'double');\n    };\n  };\n\n  getNumber(idx: number): number | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toNumber(): number {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getNumber(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS number\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Float64Array {\n    return new Float64Array(\n      Module.HEAPF64.subarray(Module._REAL(this.ptr) / 8, Module._REAL(this.ptr) / 8 + this.length)\n    );\n  }\n}\n\nexport class RComplex extends RVectorAtomic<Complex> {\n  constructor(val: WebRDataAtomic<Complex>) {\n    super(val, 'complex', RComplex.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    const data = Module._COMPLEX(ptr);\n    const naDouble = Module.getValue(Module._R_NaReal, 'double');\n\n    return (v: null | Complex, i: number) => {\n      Module.setValue(data + 8 * (2 * i), v === null ? naDouble : v.re, 'double');\n      Module.setValue(data + 8 * (2 * i + 1), v === null ? naDouble : v.im, 'double');\n    };\n  };\n\n  getComplex(idx: number): Complex | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toComplex(): Complex {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getComplex(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS object\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Float64Array {\n    return new Float64Array(\n      Module.HEAPF64.subarray(\n        Module._COMPLEX(this.ptr) / 8,\n        Module._COMPLEX(this.ptr) / 8 + 2 * this.length\n      )\n    );\n  }\n\n  toArray(): (Complex | null)[] {\n    const arr = this.toTypedArray();\n    return this.detectMissing().map((m, idx) =>\n      m ? null : { re: arr[2 * idx], im: arr[2 * idx + 1] }\n    );\n  }\n}\n\nexport class RCharacter extends RVectorAtomic<string> {\n  constructor(val: WebRDataAtomic<string>) {\n    super(val, 'character', RCharacter.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    return (v: null | string, i: number) => {\n      if (v === null) {\n        Module._SET_STRING_ELT(ptr, i, objs.naString.ptr);\n      } else {\n        Module._SET_STRING_ELT(ptr, i, new RString(v).ptr);\n      }\n    };\n  };\n\n  getString(idx: number): string | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toString(): string {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getString(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS string\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Uint32Array {\n    return new Uint32Array(\n      Module.HEAPU32.subarray(\n        Module._STRING_PTR(this.ptr) / 4,\n        Module._STRING_PTR(this.ptr) / 4 + this.length\n      )\n    );\n  }\n\n  toArray(): (string | null)[] {\n    return this.detectMissing().map((m, idx) =>\n      m ? null : Module.UTF8ToString(Module._R_CHAR(Module._STRING_ELT(this.ptr, idx)))\n    );\n  }\n}\n\nexport class RRaw extends RVectorAtomic<number> {\n  constructor(val: WebRDataAtomic<number>) {\n    super(val, 'raw', RRaw.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    const data = Module._RAW(ptr);\n\n    return (v: number, i: number) => {\n      Module.setValue(data + i, Number(v), 'i8');\n    };\n  };\n\n  getNumber(idx: number): number | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toNumber(): number {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getNumber(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS number\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Uint8Array {\n    return new Uint8Array(\n      Module.HEAPU8.subarray(Module._RAW(this.ptr), Module._RAW(this.ptr) + this.length)\n    );\n  }\n}\n\n/*\n * Convert the various types possible in the type union WebRData into\n * consistently typed arrays of names and values.\n */\nfunction toWebRData<T>(jsObj: WebRDataAtomic<T>): {\n  names: (string | null)[] | null;\n  values: (T | null)[];\n};\nfunction toWebRData(jsObj: WebRData): WebRData;\nfunction toWebRData(jsObj: WebRData): WebRData {\n  if (isWebRDataJs(jsObj)) {\n    return jsObj;\n  } else if (Array.isArray(jsObj)) {\n    return { names: null, values: jsObj };\n  } else if (jsObj && typeof jsObj === 'object' && !isComplex(jsObj)) {\n    return {\n      names: Object.keys(jsObj),\n      values: Object.values(jsObj),\n    };\n  }\n  return { names: null, values: [jsObj] };\n}\n\nexport function getRWorkerClass(type: RTypeNumber): typeof RObject {\n  const typeClasses: { [key: number]: typeof RObject } = {\n    [RTypeMap.null]: RNull,\n    [RTypeMap.symbol]: RSymbol,\n    [RTypeMap.pairlist]: RPairlist,\n    [RTypeMap.closure]: RFunction,\n    [RTypeMap.environment]: REnvironment,\n    [RTypeMap.call]: RCall,\n    [RTypeMap.special]: RFunction,\n    [RTypeMap.builtin]: RFunction,\n    [RTypeMap.string]: RString,\n    [RTypeMap.logical]: RLogical,\n    [RTypeMap.integer]: RInteger,\n    [RTypeMap.double]: RDouble,\n    [RTypeMap.complex]: RComplex,\n    [RTypeMap.character]: RCharacter,\n    [RTypeMap.list]: RList,\n    [RTypeMap.raw]: RRaw,\n    [RTypeMap.function]: RFunction,\n  };\n  if (type in typeClasses) {\n    return typeClasses[type];\n  }\n  return RObject;\n}\n\n/**\n * Test for an RWorker.RObject instance.\n *\n * RWorker.RObject is the internal interface to R objects, intended to be used\n * on the worker thread.\n *\n * @private\n * @param {any} value The object to test.\n * @return {boolean} True if the object is an instance of an RObject.\n */\nexport function isRObject(value: any): value is RObject {\n  return value instanceof RObject;\n}\n\n/**\n * A store for persistent R objects, initialised at R startup.\n */\nexport let objs: {\n  baseEnv: REnvironment,\n  bracket2Symbol: RSymbol,\n  bracketSymbol: RSymbol,\n  dollarSymbol: RSymbol,\n  emptyEnv: REnvironment,\n  false: RLogical,\n  globalEnv: REnvironment,\n  na: RLogical,\n  namesSymbol: RSymbol,\n  naString: RObject,\n  null: RNull,\n  true: RLogical,\n  unboundValue: RObject,\n};\n\n/**\n * Populate the persistent R object store.\n * @internal\n */\nexport function initPersistentObjects(){\n  objs = {\n    baseEnv: REnvironment.wrap(Module.getValue(Module._R_BaseEnv, '*')),\n    bracket2Symbol: RSymbol.wrap(Module.getValue(Module._R_Bracket2Symbol, '*')),\n    bracketSymbol: RSymbol.wrap(Module.getValue(Module._R_BracketSymbol, '*')),\n    dollarSymbol: RSymbol.wrap(Module.getValue(Module._R_DollarSymbol, '*')),\n    emptyEnv: REnvironment.wrap(Module.getValue(Module._R_EmptyEnv, '*')),\n    false: RLogical.wrap(Module.getValue(Module._R_FalseValue, '*')),\n    globalEnv: REnvironment.wrap(Module.getValue(Module._R_GlobalEnv, '*')),\n    na: RLogical.wrap(Module.getValue(Module._R_LogicalNAValue, '*')),\n    namesSymbol: RSymbol.wrap(Module.getValue(Module._R_NamesSymbol, '*')),\n    naString: RObject.wrap(Module.getValue(Module._R_NaString, '*')),\n    null: RNull.wrap(Module.getValue(Module._R_NilValue, '*')),\n    true: RLogical.wrap(Module.getValue(Module._R_TrueValue, '*')),\n    unboundValue: RObject.wrap(Module.getValue(Module._R_UnboundValue, '*')),\n  };\n}\n", "/**\n * Proxy R objects on the webR worker thread so that they can be accessed from\n * the main thread.\n * @module Proxy\n */\nimport { ChannelMain } from './chan/channel';\nimport { replaceInObject } from './utils';\nimport { isWebRPayloadPtr, WebRPayloadPtr, WebRPayload } from './payload';\nimport { RType, WebRData, WebRDataRaw } from './robj';\nimport { isRObject, RObject, isRFunction } from './robj-main';\nimport * as RWorker from './robj-worker';\nimport { ShelterID, CallRObjectMethodMessage, NewRObjectMessage } from './webr-chan';\n\n/**\n * Obtain a union of the keys corresponding to methods of a given class `T`.\n * @typeParam T The type to provide the methods for.\n */\nexport type Methods<T> = {\n  [P in keyof T]: T[P] extends (...args: any) => any ? P : never;\n}[keyof T];\n\n/**\n * Distributive conditional type for {@link RProxy}.\n *\n * Distributes {@link RProxy} over any {@link RWorker.RObject} in the given\n * union type U.\n *\n * @typeParam U The type union to distribute {@link RProxy} over.\n */\nexport type DistProxy<U> = U extends RWorker.RObject ? RProxy<U> : U;\n\n/**\n * Convert {@link RWorker.RObject} properties for use with an {@link RProxy}.\n *\n * Properties in the type parameter `T` are mapped so that {@link RProxy} is\n * distributed over any {@link RWorker.RObject} types, then wrapped in a\n * Promise.\n *\n * Function signatures are mapped so that arguments with {@link RWorker.RObject}\n * type instead take {@link RProxy}<{@link RWorker.RObject}> type. Other\n * function arguments remain as they are. The function return type is also\n * converted to a corresponding type using `RProxify` recursively.\n *\n * @typeParam T The type to convert.\n */\nexport type RProxify<T> = T extends Array<any>\n  ? Promise<DistProxy<T[0]>[]>\n  : T extends (...args: infer U) => any\n  ? (\n      ...args: {\n        [V in keyof U]: DistProxy<U[V]>;\n      }\n    ) => RProxify<ReturnType<T>>\n  : Promise<DistProxy<T>>;\n\n/**\n * Create an {@link RProxy} based on an {@link RWorker.RObject} type parameter.\n *\n * R objects created via an {@link RProxy} are intended to be used in place of\n * {@link RWorker.RObject} on the main thread. An {@link RProxy} object has the\n * same instance methods as the given {@link RWorker.RObject} parameter, with\n * the following differences:\n * * Method arguments take `RProxy` in place of {@link RWorker.RObject}.\n *\n * * Where an {@link RWorker.RObject} would be returned, an `RProxy` is\n *   returned instead.\n *\n * * All return types are wrapped in a Promise.\n *\n * If required, the {@link Payload.WebRPayloadPtr} object associated with the\n * proxy can be accessed directly through the `_payload` property.\n *\n * @typeParam T The {@link RWorker.RObject} type to convert into `RProxy` type.\n */\nexport type RProxy<T extends RWorker.RObject> = { [P in Methods<T>]: RProxify<T[P]> } & {\n  _payload: WebRPayloadPtr;\n  [Symbol.asyncIterator](): AsyncGenerator<RProxy<RWorker.RObject>, void, unknown>;\n};\n\n/**\n * Create a proxy constructor based on a {@link RWorker.RObject} class.\n *\n * The class constructors and static methods of the given subclass of\n * {@link RWorker.RObject} are proxied, and the proxied constructor returns a\n * promise to an R object of a given {@link RProxy} type.\n *\n * @typeParam T The type of the {@link RWorker.RObject} class to be proxied.\n * @typeParam R The type to be returned from the proxied class constructor.\n */\nexport type ProxyConstructor<T,R> = (T extends abstract new (...args: infer U) => any\n    ? {\n        new (\n          ...args: {\n            [V in keyof U]: U[V];\n          }\n        ): Promise<R>;\n      }\n    : never) & {\n    [P in Methods<typeof RWorker.RObject>]: RProxify<(typeof RWorker.RObject)[P]>;\n  };\n\n/* The empty function is used as base when we are proxying RFunction objects.\n * This enables function call semantics on the proxy using the apply hook.\n */\nfunction empty() {}\n\n/* Proxy the asyncIterator property for R objects with a length. This allows us\n * to use the `for await (i of obj){}` JavaScript syntax.\n */\nfunction targetAsyncIterator(chan: ChannelMain, proxy: RProxy<RWorker.RObject>) {\n  return async function* () {\n    // Get the R object's length\n    const msg: CallRObjectMethodMessage = {\n      type: 'callRObjectMethod',\n      data: {\n        payload: proxy._payload,\n        prop: 'getPropertyValue',\n        args: [{ payloadType: 'raw', obj: 'length' }],\n        shelter: undefined, // TODO\n      },\n    };\n    const reply = await chan.request(msg);\n\n    // Throw an error if there was some problem accessing the object length\n    if (typeof reply.obj !== 'number') {\n      throw new Error('Cannot iterate over object, unexpected type for length property.');\n    }\n\n    // Loop through the object and yield values\n    for (let i = 1; i <= reply.obj; i++) {\n      yield proxy.get(i);\n    }\n  };\n}\n\n/**\n * Proxy an R object method by providing an async function that requests that\n * the worker thread calls the method and then returns the result.\n *\n * When the optional payload argument has not been provided, an\n * {@link RWorker.RObject} static method is called.\n * @internal\n */\nexport function targetMethod(chan: ChannelMain, prop: string): any;\nexport function targetMethod(chan: ChannelMain, prop: string, payload: WebRPayloadPtr): any;\nexport function targetMethod(chan: ChannelMain, prop: string, payload?: WebRPayloadPtr): any {\n  return async (..._args: WebRData[]) => {\n    const args = _args.map((arg) => {\n      if (isRObject(arg)) {\n        return arg._payload;\n      }\n      return {\n        obj: replaceInObject(arg, isRObject, (obj: RObject) => obj._payload),\n        payloadType: 'raw',\n      } as WebRPayload;\n    });\n\n    const msg: CallRObjectMethodMessage = {\n      type: 'callRObjectMethod',\n      data: { payload, prop, args: args },\n    };\n    const reply = await chan.request(msg);\n\n    switch (reply.payloadType) {\n      case 'ptr':\n        return newRProxy(chan, reply);\n      case 'raw': {\n        const proxyReply = replaceInObject(\n          reply,\n          isWebRPayloadPtr,\n          (obj: WebRPayloadPtr, chan: ChannelMain) => newRProxy(chan, obj),\n          chan\n        ) as WebRPayload;\n        return proxyReply.obj;\n      }\n    }\n  };\n}\n\n/* Proxy the `RWorker` class constructors. This allows us to create a new R\n * object on the worker thread from a given JS object.\n */\nasync function newRObject(\n  chan: ChannelMain,\n  objType: RType | 'object',\n  shelter: ShelterID,\n  value: WebRData\n) {\n  const msg: NewRObjectMessage = {\n    type: 'newRObject',\n    data: {\n      objType,\n      obj: replaceInObject(value, isRObject, (obj: RObject) => obj._payload),\n      shelter: shelter,\n    },\n  };\n  const payload = await chan.request(msg);\n  switch (payload.payloadType) {\n    case 'raw':\n      throw new Error('Unexpected raw payload type returned from newRObject');\n    case 'ptr':\n      return newRProxy(chan, payload);\n  }\n}\n\n/**\n * Proxy an R object.\n *\n * The proxy targets a particular R object in WebAssembly memory. Methods of the\n * relevant subclass of {@link RWorker.RObject} are proxied, enabling\n * structured manipulation of R objects from the main thread.\n *\n * @param {ChannelMain} chan The current main thread communication channel.\n * @param {WebRPayloadPtr} payload A webR payload referencing an R object.\n * @returns {RProxy<RWorker.RObject>} An {@link RObject} corresponding to the\n * referenced R object.\n */\nexport function newRProxy(chan: ChannelMain, payload: WebRPayloadPtr): RProxy<RWorker.RObject> {\n  const proxy = new Proxy(\n    // Assume we are proxying an RFunction if the methods list contains 'exec'.\n    payload.obj.methods?.includes('exec') ? Object.assign(empty, { ...payload }) : payload,\n    {\n      get: (_: WebRPayload, prop: string | number | symbol) => {\n        if (prop === '_payload') {\n          return payload;\n        } else if (prop === Symbol.asyncIterator) {\n          return targetAsyncIterator(chan, proxy);\n        } else if (payload.obj.methods?.includes(prop.toString())) {\n          return targetMethod(chan, prop.toString(), payload);\n        }\n      },\n      apply: async (_: WebRPayload, _thisArg, args: (WebRDataRaw | RProxy<RWorker.RObject>)[]) => {\n        const res = await (newRProxy(chan, payload) as RProxy<RWorker.RFunction>).exec(...args);\n        return isRFunction(res) ? res : res.toJs();\n      },\n    }\n  ) as unknown as RProxy<RWorker.RObject>;\n  return proxy;\n}\n\n/**\n * Proxy an {@link RWorker.RObject} class.\n *\n * @param {ChannelMain} chan The current main thread communication channel.\n * @param {ShelterID} shelter The shelter ID to protect returned objects with.\n * @param {(RType | 'object')} objType The R object type, or `'object'` for the\n * generic {@link RWorker.RObject} class.\n * @returns {ProxyConstructor} A proxy to the R object subclass corresponding to\n * the given value of the `objType` argument.\n * @typeParam T The type of the {@link RWorker.RObject} class to be proxied.\n * @typeParam R The type to be returned from the proxied class constructor.\n */\nexport function newRClassProxy<T, R>(\n  chan: ChannelMain,\n  shelter: ShelterID,\n  objType: RType | 'object'\n) {\n  return new Proxy(RWorker.RObject, {\n    construct: (_, args: [WebRData]) => newRObject(chan, objType, shelter, ...args),\n    get: (_, prop: string | number | symbol) => {\n      return targetMethod(chan, prop.toString());\n    },\n  }) as unknown as ProxyConstructor<T,R>;\n}\n", "import { IN_NODE } from '../webR/compat';\nimport { WebR, WebROptions } from '../webR/webr-main';\n\nexport interface ConsoleCallbacks {\n  stdout?: (line: string) => void;\n  stderr?: (line: string) => void;\n  prompt?: (line: string) => void;\n  canvasExec?: (line: string) => void;\n}\n\n/**\n * Text-based Interactive Console for WebR\n *\n * A helper application to assist in creating an interactive R REPL based on\n * JavaScript callbacks.\n *\n * Callback functions ``stdout`` and ``stderr`` are called with a single line\n * of output as the first argument. The default implementation of `stdout` and\n * `stderr` writes to the console using `console.log` and `console.error`.\n *\n * R code can be sent as input by calling the ``stdin`` method with a single\n * line of textual input.\n *\n * A long running R computation can be interrupted by calling the `interrupt`\n * method.\n *\n * The ``prompt`` callback function is called when webR produces a prompt at\n * the REPL console and is therefore awaiting user input. The prompt character\n * (usually ``>`` or ``+``) is given as the first argument to the callback\n * function. The default implementation of `prompt` shows a JavaScript prompt\n * asking the user for input, and then sends the user input to `stdin`.\n *\n * The ``canvasExec`` callback function is called when webR writes plots to\n * the built-in HTML canvas graphics device.\n *\n * Once constructed, start the Console using the ``run`` method. The `run`\n * method starts an asynchronous infinite loop that waits for output from the\n * webR worker and then calls the relevant callbacks.\n */\nexport class Console {\n  /** The supporting instance of webR */\n  webR: WebR;\n  /**\n   * A HTML canvas element\n   *\n   * The canvas graphics device writes to this element by default. Undefined\n   * when HTML canvas is unsupported.\n   */\n  canvas: HTMLCanvasElement | undefined;\n  /** Called when webR outputs to ``stdout`` */\n  #stdout: (line: string) => void;\n  /** Called when webR outputs to ``stderr`` */\n  #stderr: (line: string) => void;\n  /** Called when webR prompts for input */\n  #prompt: (line: string) => void;\n  /** Called when webR writes to the HTML canvas element */\n  #canvasExec: (line: string) => void;\n\n  /**\n   * @param {ConsoleCallbacks} callbacks A list of webR Console callbacks to\n   * be used for this console.\n   * @param {WebROptions} options The options to use for the new instance of\n   * webR started to support this console.\n   */\n  constructor(\n    callbacks: ConsoleCallbacks = {},\n    options: WebROptions = {\n      REnv: {\n        R_HOME: '/usr/lib/R',\n        R_ENABLE_JIT: '0',\n        R_DEFAULT_DEVICE: 'canvas',\n      },\n    }\n  ) {\n    this.webR = new WebR(options);\n    if (!IN_NODE) {\n      this.canvas = document.createElement('canvas');\n      this.canvas.setAttribute('width', '1008');\n      this.canvas.setAttribute('height', '1008');\n    }\n    this.#stdout = callbacks.stdout || this.#defaultStdout;\n    this.#stderr = callbacks.stderr || this.#defaultStderr;\n    this.#prompt = callbacks.prompt || this.#defaultPrompt;\n    this.#canvasExec = callbacks.canvasExec || this.#defaultCanvasExec;\n  }\n\n  /**\n   * Write a line of input to webR's REPL through ``stdin``\n   * @param {string} input A line of input text.\n   */\n  stdin(input: string) {\n    this.webR.writeConsole(input);\n  }\n\n  /**\n   * Interrupt a long running R computation and return to the prompt\n   */\n  interrupt() {\n    this.webR.interrupt();\n  }\n\n  /**\n   * The default function called when webR outputs to ``stdout``\n   * @param {string} text The line sent to stdout by webR.\n   */\n  #defaultStdout = (text: string) => {\n    console.log(text);\n  };\n\n  /**\n   * The default function called when webR outputs to ``stderr``\n   * @param {string} text The line sent to stderr by webR.\n   */\n  #defaultStderr = (text: string) => {\n    console.error(text);\n  };\n\n  /**\n   * The default function called when webR writes out a prompt\n   * @param {string} text The text content of the prompt.\n   */\n  #defaultPrompt = (text: string) => {\n    const input = prompt(text);\n    if (input) this.stdin(`${input}\\n`);\n  };\n\n  /**\n   * The default function called when webR writes to HTML canvas\n   * @param {string} exec The canvas API command as a text string.\n   */\n  #defaultCanvasExec = (exec: string) => {\n    if (IN_NODE) {\n      throw new Error('Plotting with HTML canvas is not yet supported under Node');\n    }\n    Function(`this.getContext('2d').${exec}`).bind(this.canvas)();\n  };\n\n  /**\n   * Start the webR console\n   */\n  run() {\n    this.#run();\n  }\n\n  /*\n   * Start the asynchronous infinite loop\n   *\n   * This loop waits for output from webR and dispatches callbacks based on the\n   * message recieved.\n   *\n   * The promise returned by this asynchronous function never resolves.\n   */\n  async #run() {\n    for (;;) {\n      const output = await this.webR.read();\n      switch (output.type) {\n        case 'stdout':\n          this.#stdout(output.data as string);\n          break;\n        case 'stderr':\n          this.#stderr(output.data as string);\n          break;\n        case 'prompt':\n          this.#prompt(output.data as string);\n          break;\n        case 'canvasExec':\n          this.#canvasExec(output.data as string);\n          break;\n        default:\n          console.warn(`Unhandled output type for webR Console: ${output.type}.`);\n      }\n    }\n  }\n}\n", "/**\n * The webR JavaScript API.\n * @module WebR\n */\n\nimport { ChannelMain } from './chan/channel';\nimport { newChannelMain, ChannelType } from './chan/channel-common';\nimport { Message } from './chan/message';\nimport { BASE_URL, PKG_BASE_URL } from './config';\nimport { WebRPayloadPtr } from './payload';\nimport { newRProxy, newRClassProxy } from './proxy';\nimport { isRObject, RCharacter, RComplex, RDouble } from './robj-main';\nimport { REnvironment, RSymbol, RInteger } from './robj-main';\nimport { RList, RLogical, RNull, RObject, RPairlist, RRaw, RString, RCall } from './robj-main';\nimport { replaceInObject } from './utils';\nimport * as RWorker from './robj-worker';\n\nimport {\n  CaptureRMessage,\n  EvalRMessage,\n  EvalRMessageOutputType,\n  EvalRMessageRaw,\n  EvalROptions,\n  FSMessage,\n  FSReadFileMessage,\n  FSWriteFileMessage,\n  NewShelterMessage,\n  ShelterDestroyMessage,\n  ShelterMessage,\n} from './webr-chan';\n\nexport { Console, ConsoleCallbacks } from '../console/console';\n\n/**\n * The webR FS API for interacting with the Emscripten Virtual File System.\n */\nexport interface WebRFS {\n  /**\n   * Lookup information about a file or directory node in the Emscripten\n   * virtual file system.\n   * @param {string} path Path to the requested node.\n   * @returns {Promise<FSNode>} The requested node.\n   */\n  lookupPath: (path: string) => Promise<FSNode>;\n  /**\n   * Create a directory on the Emscripten virtual file system.\n   * @param {string} path Path of the directory to create.\n   * @returns {Promise<FSNode>} The newly created directory node.\n   */\n  mkdir: (path: string) => Promise<FSNode>;\n  /**\n   * Get the content of a file on the Emscripten virtual file system.\n   * @param {string} path Path of the file to read.\n   * @param {string} [flags] Open the file with the specified flags.\n   * @returns {Promise<Uint8Array>} The content of the requested file.\n   */\n  readFile: (path: string, flags?: string) => Promise<Uint8Array>;\n  /**\n   * Remove a directory on the Emscripten virtual file system.\n   * @param {string} path Path of the directory to remove.\n   */\n  rmdir: (path: string) => Promise<void>;\n  /**\n   * Write a new file to the Emscripten virtual file system.\n   * @param {string} path Path of the new file.\n   * @param {Uint8Array} data The content of the new file.\n   * @param {string} [flags] Open the file with the specified flags.\n   */\n  writeFile: (path: string, data: ArrayBufferView, flags?: string) => Promise<void>;\n  /**\n   * Unlink a node on the Emscripten virtual file system. If that node was the\n   * last link to a file it is is deleted.\n   * @param {string} path Path of the target node.\n   */\n  unlink: (path: string) => Promise<void>;\n}\n\n/** A filesystem entry in the Emscripten Virtual File System */\nexport type FSNode = {\n  id: number;\n  name: string;\n  mode: number;\n  isFolder: boolean;\n  contents: { [key: string]: FSNode };\n};\n\n/**\n * The configuration settings to be used when starting webR.\n */\nexport interface WebROptions {\n  /**\n   * Command line arguments to be passed to R.\n   * Default: `[]`.\n   */\n  RArgs?: string[];\n\n  /**\n   * Environment variables to be made available for the R process.\n   * Default: `{ R_HOME: '/usr/lib/R', R_ENABLE_JIT: 0 }`.\n   */\n  REnv?: { [key: string]: string };\n\n  /**\n   * The base URL used for downloading R WebAssembly binaries.\n   *  Default: `'https://webr.r-wasm.org/[version]/'`\n   */\n  WEBR_URL?: string;\n\n  /**\n   * The repo URL to use when downloading R WebAssembly packages.\n   * Default: `'https://repo.r-wasm.org/`\n   */\n  PKG_URL?: string;\n\n  /**\n   * The base URL from where to load JavaScript worker scripts when loading\n   * webR with the ServiceWorker communication channel mode.\n   * Default: `''`\n   */\n  SW_URL?: string;\n\n  /**\n   * The WebAssembly user's home directory and initial working directory.\n   * Default: `'/home/web_user'`\n   */\n  homedir?: string;\n\n  /**\n   * Start R in interactive mode?\n   * Default: `true`.\n   */\n  interactive?: boolean;\n\n  /**\n   * Set the communication channel type to be used.\n   * Deafult: `channelType.Automatic`\n   */\n  channelType?: (typeof ChannelType)[keyof typeof ChannelType];\n}\n\nconst defaultEnv = {\n  R_HOME: '/usr/lib/R',\n  R_ENABLE_JIT: '0',\n};\n\nconst defaultOptions = {\n  RArgs: [],\n  REnv: defaultEnv,\n  WEBR_URL: BASE_URL,\n  SW_URL: '',\n  PKG_URL: PKG_BASE_URL,\n  homedir: '/home/web_user',\n  interactive: true,\n  channelType: ChannelType.Automatic,\n};\n\n/**\n * The webR class is used to initialize and interact with the webR system.\n *\n * Start webR by constructing an instance of the WebR class, optionally passing\n * an options argument of type {@link WebROptions}. WebR will begin to download\n * and start a version of R built for WebAssembly in a worker thread.\n */\nexport class WebR {\n  #chan!: ChannelMain;\n  globalShelter!: Shelter;\n\n  RObject!: ReturnType<typeof newRClassProxy<typeof RWorker.RObject, RObject>>;\n  RLogical!: ReturnType<typeof newRClassProxy<typeof RWorker.RLogical, RLogical>>;\n  RInteger!: ReturnType<typeof newRClassProxy<typeof RWorker.RInteger, RInteger>>;\n  RDouble!: ReturnType<typeof newRClassProxy<typeof RWorker.RDouble, RDouble>>;\n  RCharacter!: ReturnType<typeof newRClassProxy<typeof RWorker.RCharacter, RCharacter>>;\n  RComplex!: ReturnType<typeof newRClassProxy<typeof RWorker.RComplex, RComplex>>;\n  RRaw!: ReturnType<typeof newRClassProxy<typeof RWorker.RRaw, RRaw>>;\n  RList!: ReturnType<typeof newRClassProxy<typeof RWorker.RList, RList>>;\n  RPairlist!: ReturnType<typeof newRClassProxy<typeof RWorker.RPairlist, RPairlist>>;\n  REnvironment!: ReturnType<typeof newRClassProxy<typeof RWorker.REnvironment, REnvironment>>;\n  RSymbol!: ReturnType<typeof newRClassProxy<typeof RWorker.RSymbol, RSymbol>>;\n  RString!: ReturnType<typeof newRClassProxy<typeof RWorker.RString, RString>>;\n  RCall!: ReturnType<typeof newRClassProxy<typeof RWorker.RCall, RCall>>;\n\n  objs: {\n    baseEnv: REnvironment;\n    globalEnv: REnvironment;\n    null: RNull;\n    true: RLogical;\n    false: RLogical;\n    na: RLogical;\n  };\n\n  Shelter;\n\n  constructor(options: WebROptions = {}) {\n    const config: Required<WebROptions> = Object.assign(defaultOptions, options);\n    this.#chan = newChannelMain(config);\n\n    this.objs = {} as typeof this.objs;\n    this.Shelter = newShelterProxy(this.#chan);\n  }\n\n  /**\n   * @returns {Promise<void>} A promise that resolves once webR has been\n   * intialised.\n   */\n  async init() {\n    const init = await this.#chan.initialised;\n\n    this.globalShelter = await new this.Shelter();\n\n    this.RObject = this.globalShelter.RObject;\n    this.RLogical = this.globalShelter.RLogical;\n    this.RInteger = this.globalShelter.RInteger;\n    this.RDouble = this.globalShelter.RDouble;\n    this.RComplex = this.globalShelter.RComplex;\n    this.RCharacter = this.globalShelter.RCharacter;\n    this.RRaw = this.globalShelter.RRaw;\n    this.RList = this.globalShelter.RList;\n    this.RPairlist = this.globalShelter.RPairlist;\n    this.REnvironment = this.globalShelter.REnvironment;\n    this.RSymbol = this.globalShelter.RSymbol;\n    this.RString = this.globalShelter.RString;\n    this.RCall = this.globalShelter.RCall;\n\n    this.objs = {\n      baseEnv: (await this.RObject.getPersistentObject('baseEnv')) as REnvironment,\n      globalEnv: (await this.RObject.getPersistentObject('globalEnv')) as REnvironment,\n      null: (await this.RObject.getPersistentObject('null')) as RNull,\n      true: (await this.RObject.getPersistentObject('true')) as RLogical,\n      false: (await this.RObject.getPersistentObject('false')) as RLogical,\n      na: (await this.RObject.getPersistentObject('na')) as RLogical,\n    };\n\n    return init;\n  }\n\n  /**\n   * Close the communication channel between the main thread and the worker\n   * thread cleanly. Once this has been executed, webR will be unable to\n   * continue.\n   */\n  close() {\n    this.#chan.close();\n  }\n\n  /**\n   * Read from the communication channel and return an output message.\n   * @returns {Promise<Message>} The output message\n   */\n  async read(): Promise<Message> {\n    return await this.#chan.read();\n  }\n\n  /**\n   * Flush the output queue in the communication channel and return all output\n   * messages.\n   * @returns {Promise<Message[]>} The output messages\n   */\n  async flush(): Promise<Message[]> {\n    return await this.#chan.flush();\n  }\n\n  /**\n   * Send a message to the communication channel input queue.\n   * @param {Message} msg Message to be added to the input queue.\n   */\n  write(msg: Message) {\n    this.#chan.write(msg);\n  }\n\n  /**\n   * Send a line of standard input to the communication channel input queue.\n   * @param {string} input Message to be added to the input queue.\n   */\n  writeConsole(input: string) {\n    this.write({ type: 'stdin', data: input + '\\n' });\n  }\n\n  /** Attempt to interrupt a running R computation. */\n  interrupt() {\n    this.#chan.interrupt();\n  }\n\n  /**\n   * Install a list of R packages from the default webR CRAN-like repo.\n   * @param {string[]} packages An array of R pacakge names.\n   */\n  async installPackages(packages: string[]) {\n    for (const pkg of packages) {\n      const msg = { type: 'installPackage', data: { name: pkg } };\n      await this.#chan.request(msg);\n    }\n  }\n\n  /**\n   * Destroy an R object reference.\n   * @param {RObject} x An R object reference.\n   */\n  async destroy(x: RObject) {\n    await this.globalShelter.destroy(x);\n  }\n\n  /**\n   * Evaluate the given R code.\n   *\n   * Stream outputs and any conditions raised during exectution are written to\n   * the JavaScript console.\n   *\n   * @param {string} code The R code to evaluate.\n   * @param {EvalROptions} [options] Options for the execution environment.\n   * @returns {Promise<RObject>} The result of the computation.\n   */\n  async evalR(code: string, options?: EvalROptions): Promise<RObject> {\n    return this.globalShelter.evalR(code, options);\n  }\n\n  async evalRVoid(code: string, options?: EvalROptions) {\n    return this.evalRRaw(code, 'void', options);\n  }\n\n  async evalRBoolean(code: string, options?: EvalROptions) {\n    return this.evalRRaw(code, 'boolean', options);\n  }\n\n  async evalRNumber(code: string, options?: EvalROptions) {\n    return this.evalRRaw(code, 'number', options);\n  }\n\n  async evalRString(code: string, options?: EvalROptions) {\n    return this.evalRRaw(code, 'string', options);\n  }\n\n  /**\n   * Evaluate the given R code, returning the result as a raw JavaScript object.\n   *\n   * @param {string} code The R code to evaluate.\n   * @param {EvalRMessageOutputType} outputType JavaScript type to return the result as.\n   * @param {EvalROptions} [options] Options for the execution environment.\n   * @returns {Promise<unknown>} The result of the computation.\n   */\n  async evalRRaw(code: string, outputType: 'void', options?: EvalROptions): Promise<void>;\n  async evalRRaw(code: string, outputType: 'boolean', options?: EvalROptions): Promise<boolean>;\n  async evalRRaw(code: string, outputType: 'boolean[]', options?: EvalROptions): Promise<boolean[]>;\n  async evalRRaw(code: string, outputType: 'number', options?: EvalROptions): Promise<number>;\n  async evalRRaw(code: string, outputType: 'number[]', options?: EvalROptions): Promise<number[]>;\n  async evalRRaw(code: string, outputType: 'string', options?: EvalROptions): Promise<string>;\n  async evalRRaw(code: string, outputType: 'string[]', options?: EvalROptions): Promise<string[]>;\n  async evalRRaw(code: string, outputType: EvalRMessageOutputType, options: EvalROptions = {}) {\n    const opts = replaceInObject(options, isRObject, (obj: RObject) => obj._payload);\n    const msg: EvalRMessageRaw = {\n      type: 'evalRRaw',\n      data: { code: code, options: opts as EvalROptions, outputType: outputType },\n    };\n    const payload = await this.#chan.request(msg);\n\n    switch (payload.payloadType) {\n      case 'raw':\n        return payload.obj;\n      case 'ptr':\n        throw new Error('Unexpected ptr payload type returned from evalRVoid');\n    }\n  }\n\n  FS = {\n    lookupPath: async (path: string): Promise<FSNode> => {\n      const msg: FSMessage = { type: 'lookupPath', data: { path } };\n      const payload = await this.#chan.request(msg);\n      return payload.obj as FSNode;\n    },\n    mkdir: async (path: string): Promise<FSNode> => {\n      const msg: FSMessage = { type: 'mkdir', data: { path } };\n      const payload = await this.#chan.request(msg);\n      return payload.obj as FSNode;\n    },\n    readFile: async (path: string, flags?: string): Promise<Uint8Array> => {\n      const msg: FSReadFileMessage = { type: 'readFile', data: { path, flags } };\n      const payload = await this.#chan.request(msg);\n      return payload.obj as Uint8Array;\n    },\n    rmdir: async (path: string): Promise<void> => {\n      const msg: FSMessage = { type: 'rmdir', data: { path } };\n      await this.#chan.request(msg);\n    },\n    writeFile: async (path: string, data: ArrayBufferView, flags?: string): Promise<void> => {\n      const msg: FSWriteFileMessage = { type: 'writeFile', data: { path, data, flags } };\n      await this.#chan.request(msg);\n    },\n    unlink: async (path: string): Promise<void> => {\n      const msg: FSMessage = { type: 'unlink', data: { path } };\n      await this.#chan.request(msg);\n    },\n  };\n}\n\n/** WebR shelters provide fine-grained control over the lifetime of R objects. */\nexport class Shelter {\n  #id = '';\n  #chan: ChannelMain;\n  #initialised = false;\n\n  RObject!: ReturnType<typeof newRClassProxy<typeof RWorker.RObject, RObject>>;\n  RLogical!: ReturnType<typeof newRClassProxy<typeof RWorker.RLogical, RLogical>>;\n  RInteger!: ReturnType<typeof newRClassProxy<typeof RWorker.RInteger, RInteger>>;\n  RDouble!: ReturnType<typeof newRClassProxy<typeof RWorker.RDouble, RDouble>>;\n  RCharacter!: ReturnType<typeof newRClassProxy<typeof RWorker.RCharacter, RCharacter>>;\n  RComplex!: ReturnType<typeof newRClassProxy<typeof RWorker.RComplex, RComplex>>;\n  RRaw!: ReturnType<typeof newRClassProxy<typeof RWorker.RRaw, RRaw>>;\n  RList!: ReturnType<typeof newRClassProxy<typeof RWorker.RList, RList>>;\n  RPairlist!: ReturnType<typeof newRClassProxy<typeof RWorker.RPairlist, RPairlist>>;\n  REnvironment!: ReturnType<typeof newRClassProxy<typeof RWorker.REnvironment, REnvironment>>;\n  RSymbol!: ReturnType<typeof newRClassProxy<typeof RWorker.RSymbol, RSymbol>>;\n  RString!: ReturnType<typeof newRClassProxy<typeof RWorker.RString, RString>>;\n  RCall!: ReturnType<typeof newRClassProxy<typeof RWorker.RCall, RCall>>;\n\n  /** @internal */\n  constructor(chan: ChannelMain) {\n    this.#chan = chan;\n  }\n\n  /** @internal */\n  async init() {\n    if (this.#initialised) {\n      return;\n    }\n\n    const msg = { type: 'newShelter' } as NewShelterMessage;\n    const payload = await this.#chan.request(msg);\n    this.#id = payload.obj as string;\n\n    this.RObject = newRClassProxy<typeof RWorker.RObject, RObject>(this.#chan, this.#id, 'object');\n    this.RLogical = newRClassProxy<typeof RWorker.RLogical, RLogical>(this.#chan, this.#id, 'logical');\n    this.RInteger = newRClassProxy<typeof RWorker.RInteger, RInteger>(this.#chan, this.#id, 'integer');\n    this.RDouble = newRClassProxy<typeof RWorker.RDouble, RDouble>(this.#chan, this.#id, 'double');\n    this.RComplex = newRClassProxy<typeof RWorker.RComplex, RComplex>(this.#chan, this.#id, 'complex');\n    this.RCharacter = newRClassProxy<typeof RWorker.RCharacter, RCharacter>(this.#chan, this.#id, 'character');\n    this.RRaw = newRClassProxy<typeof RWorker.RRaw, RRaw>(this.#chan, this.#id, 'raw');\n    this.RList = newRClassProxy<typeof RWorker.RList, RList>(this.#chan, this.#id, 'list');\n    this.RPairlist = newRClassProxy<typeof RWorker.RPairlist, RPairlist>(this.#chan, this.#id, 'pairlist');\n    this.REnvironment = newRClassProxy<typeof RWorker.REnvironment, REnvironment>(this.#chan, this.#id, 'environment');\n    this.RSymbol = newRClassProxy<typeof RWorker.RSymbol, RSymbol>(this.#chan, this.#id, 'symbol');\n    this.RString = newRClassProxy<typeof RWorker.RString, RString>(this.#chan, this.#id, 'string');\n    this.RCall = newRClassProxy<typeof RWorker.RCall, RCall>(this.#chan, this.#id, 'call');\n\n    this.#initialised = true;\n  }\n\n  async purge() {\n    const msg: ShelterMessage = {\n      type: 'shelterPurge',\n      data: this.#id,\n    };\n    await this.#chan.request(msg);\n  }\n\n  async destroy(x: RObject) {\n    const msg: ShelterDestroyMessage = {\n      type: 'shelterDestroy',\n      data: { id: this.#id, obj: x._payload },\n    };\n    await this.#chan.request(msg);\n  }\n\n  async size(): Promise<number> {\n    const msg: ShelterMessage = {\n      type: 'shelterSize',\n      data: this.#id,\n    };\n    const payload = await this.#chan.request(msg);\n    return payload.obj as number;\n  }\n\n  /**\n   * Evaluate the given R code.\n   *\n   * Stream outputs and any conditions raised during exectution are written to\n   * the JavaScript console. The returned R object is protected by the shelter.\n   *\n   * @param {string} code The R code to evaluate.\n   * @param {EvalROptions} [options] Options for the execution environment.\n   * @returns {Promise<RObject>} The result of the computation.\n   */\n  async evalR(code: string, options: EvalROptions = {}): Promise<RObject> {\n    const opts = replaceInObject(options, isRObject, (obj: RObject) => obj._payload);\n    const msg: EvalRMessage = {\n      type: 'evalR',\n      data: { code: code, options: opts as EvalROptions, shelter: this.#id },\n    };\n    const payload = await this.#chan.request(msg);\n\n    switch (payload.payloadType) {\n      case 'raw':\n        throw new Error('Unexpected payload type returned from evalR');\n      default:\n        return newRProxy(this.#chan, payload);\n    }\n  }\n\n  /**\n   * Evaluate the given R code, capturing output.\n   *\n   * Stream outputs and conditions raised during exectution are captured and\n   * returned as part of the output of this function. Returned R objects are\n   * protected by the shelter.\n   *\n   * @param {string} code The R code to evaluate.\n   * @param {EvalROptions} [options] Options for the execution environment.\n   * @returns {Promise<{result: RObject, output: unknown[]}>} An object\n   * containing the result of the computation and and array of captured output.\n   */\n  async captureR(code: string, options: EvalROptions = {}): Promise<{\n    result: RObject;\n    output: unknown[];\n  }> {\n    const opts = replaceInObject(options, isRObject, (obj: RObject) => obj._payload);\n    const msg: CaptureRMessage = {\n      type: 'captureR',\n      data: {\n        code: code,\n        options: opts as EvalROptions,\n        shelter: this.#id,\n      },\n    };\n    const payload = await this.#chan.request(msg);\n\n    switch (payload.payloadType) {\n      case 'ptr':\n        throw new Error('Unexpected payload type returned from evalR');\n\n      case 'raw': {\n        const data = payload.obj as {\n          result: WebRPayloadPtr;\n          output: { type: string; data: any }[];\n        };\n        const result = newRProxy(this.#chan, data.result);\n        const output = data.output;\n\n        for (let i = 0; i < output.length; ++i) {\n          if (output[i].type !== 'stdout' && output[i].type !== 'stderr') {\n            output[i].data = newRProxy(this.#chan, output[i].data as WebRPayloadPtr);\n          }\n        }\n\n        return { result, output };\n      }\n    }\n  }\n}\n\nfunction newShelterProxy(chan: ChannelMain) {\n  return new Proxy(Shelter, {\n    construct: async () => {\n      const out = new Shelter(chan);\n      await out.init();\n      return out;\n    },\n  }) as unknown as {\n    new (): Promise<Shelter>;\n  };\n}\n"],
  "mappings": "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",
  "names": ["encoder", "decoder", "size", "_interruptBuffer", "transfer", "_handleEventsFromWorker", "handleEventsFromWorker_fn", "_onMessageFromWorker", "_ep", "_dispatch", "_interrupt", "transfer", "isRObject", "objs", "_newSetter", "isRObject", "chan", "_a", "_chan"]
}
