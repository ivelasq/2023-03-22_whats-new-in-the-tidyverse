---
subtitle: "tidyr 1.3.0"
title: "New `separate_* functions`"
date: 2023-01-24
image: "tidyr-separate-family.png"
image-alt: "tidyr 1.3.0. Screenshot of text of various separate functions."
categories:
  - "tidyr"
description: A new family of `separate_*()` functions supersedes `separate()`, `separate_rows()`, and `extract()`.
engine: knitr
editor: visual
---

Install tidyr 1.3.0 with:

```{r}
#| eval: false
pak::pak("cran/tidyr@1.3.0")
```

Load the package with:

```{r}
library(tidyr)
```

## `separate_*()` family of functions

A new family of `separate_*()` functions supersedes `separate()`, `separate_rows()`, and `extract()`.

::: panel-tabset
## Before

|                                  | Make columns                     | Make rows         |
|----------------------------------|----------------------------------|-------------------|
| Separate with delimiter          | `separate(sep = string)`         | `separate_rows()` |
| Separate by position             | `separate(sep = integer_vector)` | N/A               |
| Separate with regular expression | `extract()`                      |                   |

## After

|                                  | Make columns                | Make rows                    |
|----------------------------------|-----------------------------|------------------------------|
| Separate with delimiter          | `separate_wider_delim()`    | `separate_longer_delim()`    |
| Separate by position             | `separate_wider_position()` | `separate_longer_position()` |
| Separate with regular expression | `separate_wider_regex()`    |                              |
:::

Let's grab some data from the tidyhydat package. The `Date` column is made up of a date in YYYY-MM-DD format and time in HH:MM:SS format:

```{r}
#| message: false
library(tidyhydat)
library(tidyr)
library(dplyr)

station <-
  realtime_dd(station_number = c("01CD005"))

station |>
  select(Date)
```

Use `separate_wider_position()` to move these into their own columns:

```{r}
station |>
  select(Date) |>
  separate_wider_position(Date,
                          widths = c(ymd = 10, space = 1, hms = 8))
```

What if we don't want the `space` column?

```{r}
#| error: true
station |>
  select(Date) |>
  separate_wider_position(Date,
                          widths = c(ymd = 10, hms = 8))
```

```{r}
#| error: true
station |>
  select(Date) |>
  separate_wider_position(Date,
                          widths = c(ymd = 10, hms = 8),
                          too_many = "debug")
```

Use `NA` if there are components that you don't want to appear in the output:

```{r}
station_split <-
  station |>
  select(Date) |>
  separate_wider_position(Date,
                          widths = c(ymd = 10, 1, hms = 8))

station_split
```

Use `separate_wider_delim()` to break things further down:

```{r}
station_split |>
  separate_wider_delim(ymd,
                       delim = "-",
                       names = c("year", "month", "day")) |>
  separate_wider_delim(hms,
                       delim = ":",
                       names = c("hour", "minute", "second"))
```

Use `separate_wider_regex()` to separate a vector of regular expressions that are matched in order, from left to right:

```{r}
#| message: false
library(tidycensus)

vt_census <- tidycensus::get_decennial(
  geography = "block",
  state = "VT",
  county = "Washington",
  variables = "P1_001N",
  year = 2020
)

vt_census

vt_census |>
  select(NAME) |> 
  separate_wider_regex(
    NAME,
    patterns = c(
      "Block ", block = "\\d+", ", ",
      "Block Group ", block_group = "\\d+", ", ",
      "Census Tract ", tract = "\\d+.\\d+", ", ",
      county = "[^,]+", ", ",
      state = ".*"
    )
  )
```

### Learn more

-   [tidyverse blog: tidyr 1.3.0](https://www.tidyverse.org/blog/2023/01/tidyr-1-3-0/)

-   [tidyr release notes](https://github.com/tidyverse/tidyr/releases/tag/v1.3.0)
