---
title: "Breaking changes"
subtitle: "purrr 1.1.0"
date: 2022-12-20
image: "purrr-breaking-changes.png"
image-alt: "Text that say purrr breaking changes. Screenshot of the runtime of the cross_df and expand grid functions."
categories:
  - "purrr"
description: There are four important changes in purrr 1.0.0.
engine: knitr
editor: visual
---

Install purrr 1.0.0 with:

```{r}
#| eval: false
pak::pak("cran/purrr@1.0.0")
```

Load the package with:

```{r}
#| message: false
library(purrr)
```

## Breaking changes

There are four important changes in purrr 1.0.0:

-   `pluck()` behaves differently when extracting 0-length vectors.
-   The `map()` family uses the tidyverse rules for coercion and recycling.
-   All functions that modify lists handle `NULL` consistently.
-   Deprecated functions that aren't related to the core purpose of purrr.

### `pluck()` and zero-length vectors

`pluck()` is a function that lets you safely get or set an element within a nested structure.

Before, `pluck()` replaced 0-length vectors with the value of default. Now default is only used for `NULL` and absent elements:

```{r}
x <- list(y = list(a = character(), b = NULL))
x
```

```{r}
x |> pluck("y", "a", .default = NA)
```

```{r}
x |> pluck("y", "b", .default = NA)
```

```{r}
x |> pluck("y", "c", .default = NA)
```

This also impacts `map_*` because using an integer vector, character vector, or list instead of a function automatically calls `pluck()`:

```{r}
x <- list(list(1), list(), list(NULL), list(character()))
x |> map(1, .default = 0) |> str()
```

## Tidyverse consistency

The team edited the `map_*` family to be consistent with general tidyverse coercion and recycling rules, as implemented by the vctrs package.

-   `map_lgl()`
-   `map_int()`
-   `map_int()`
-   `map_dbl()`

::: panel-tabset
## Before

```{r}
map_chr(1:4, \(x) x + 1)
```

## After

```{r}
#| warning: false
map_chr(1:4, \(x) as.character(x + 1))
```
:::

General principles:

-   Converting a logical/integer/double to a character vector is potentially dangerous and should require an explicit coercion.
-   Vectors of length 1 are recycled to any size but all other vectors must have the same length.

## Assigning `NULL`

purrr has a number of functions that modify a list:

-   `pluck()`
-   `assign_in()`
-   `modify()`
-   `modify2()`
-   `modify_if()`
-   `modify_at()`
-   `list_modify()`

Previously, these functions had inconsistent behavior when you attempted to modify an element with `NULL`: some functions would delete that element, and some would set it to NULL.

```{r}
x1 <- x2 <- x3 <- list(a = 1, b = 2)

x1$a <- NULL
str(x1)

x2["a"] <- list(NULL)
str(x2)
```

Now functions that edit a list will create an element containing `NULL`:

```{r}
x3 |> 
  list_modify(a = NULL) |> 
  str()

x3 |> 
  modify_at("b", \(x) NULL) |> 
  str()
```

If you want to delete the element, you can use `zap()`:

```{r}
x3 |> 
  list_modify(a = zap()) |> 
  str()
```

### Deprecations

#### `cross()` and `cross_df()`

`cross()`and all its variants have been deprecated in favor of `tidyr::expand_grid()`. These functions were slow and buggy:

```{r}
#| warning: false
k = 12
x = rep(list(1:3), k) |>
  setNames(LETTERS[1:k])

system.time({ x |> purrr::cross_df() })

system.time({ x |> tidyr::expand_grid() })
```

#### `update_list()`, `rerun()`, and the use of tidyselect with `map_at()`

`update_list()`, `rerun()`, and the use of tidyselect with `map_at()` and friends have been deprecated because non-standard evaluation is not a good fit for purrr.

[In most programming languages, you can only access the values of a function's arguments. In R, you can also access the code used to compute them. This makes it possible to evaluate code in non-standard ways: to use what is known as non-standard evaluation, or NSE for short.]{.aside}[^1]

[^1]: [https://adv-r.hadley.nz/metaprogramming.html]{.aside}

#### `lift_*`

The `lift_*` family of functions has been superseded because they promote a style of function manipulation that is not commonly used in R.

#### `prepend()`, `rdunif()`, `rbernoulli()`, `when()`, and `list_along()`

These have been deprecated because they're not directly related to functional programming.

#### splice()

`splice()` has been deprecated because automatic splicing doesn't make for good UI and there are other ways to achieve the same result.

### Learn more

-   [tidyverse blog: purrr 1.0.0](https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/)
-   [purrr release notes](https://github.com/tidyverse/purrr/releases/tag/v1.0.0)
