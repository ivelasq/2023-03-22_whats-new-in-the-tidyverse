---
title: "Per-operation grouping"
subtitle: "dplyr 1.1.0"
image: "per-operation.png"
image-alt: "Text: Per-operation grouping, dplyr. An image of an example call using by."
categories:
  - dplyr
date: 2023-01-29
description: "Introducing `by`/`.by`, an experimental grouping alternative to `group_by()`."
engine: knitr
editor: visual
---

Install dplyr 1.1.0 with:

```{r}
#| eval: false
pak::pak("cran/dplyr@1.1.0")
```

Load the package with:

```{r}
#| message: false
library(dplyr)
```

## Per-operation grouping

`by`/`.by` is an experimental grouping alternative to `group_by()`.

### `group_by()`

`group_by()` is a function that groups by one or more variable.

```{r}
transactions <-
  tibble::tribble(
    ~company, ~year, ~revenue,
         "A", 2019L,      20L,
         "A", 2019L,      50L,
         "A", 2020L,       4L,
         "B", 2021L,      10L,
         "B", 2023L,      12L,
         "B", 2023L,      18L
    )
```

Let's say you want revenue by company and year:

```{r}
transactions |>
  group_by(company, year) |>
  mutate(total = sum(revenue))
```

Notice the message that says `Groups: company, year [4]`. `group_by()` provides persistent grouping (lasts for more than one operation).

If you want only the total yearly revenue of each company, you can use `summarize()` which peels off a layer of grouping by default:

```{r}
#| message: false
transactions %>% 
  group_by(company, year) %>% 
  summarize(revenue = sum(revenue))
```

(Year is removed as a group).

What if you didn't want groups anymore?

::: panel
## Before: `ungroup()`

```{r}
transactions %>% 
  group_by(company, year,) %>% 
  summarize(revenue = sum(revenue)) %>% 
  ungroup()
```

## Before: `.groups = "drop"`

```{r}
transactions %>% 
  group_by(company, year,) %>% 
  summarize(revenue = sum(revenue),
            .groups = "drop")
```

## Now: `by/.by`

`by/.by` introduces the idea of per-operation grouping:

```{r}
transactions |>
  mutate(total = sum(revenue), .by = c(company, year))
```
:::

Notice this is longer grouped by company on the way out. It does the **one operation** then drops off.

1.  

::: panel-tabset
## `group_by()`

```{mermaid}
flowchart LR
  A[Bare tibble] --> B(Transaction)
  B --> C{Grouped data frame}
```

## `by/.by`

```{mermaid}
flowchart LR
  A[Bare tibble] --> B(Transaction)
  B --> C[Bare tibble]
```
:::

Advantages:

-   `summarise()` didn't emit a message about regrouping.
-   You never have to remember to `ungroup()`.
-   Order doesn't matter (because you're not peeling off layers).
-   You can place the grouping specification alongside the code that uses it, rather than in a separate `group_by()` line.
-   You can use tidyselect for multiple columns, including unquoted column names or tidyselections like `.by = all_of(c(""))`.

Things to note:

-   `by/.by` is only for selection, it does not create columns.
-   `by/.by` always returns an ungrouped data frame (so take note if you depend on grouped data frames with `group_by()`).
-   With `by/.by`, you must create your grouping columns ahead of time.
-   `.by` doesn't sort grouping keys. `group_by()` always sorts keys in ascending order, which affects the results of verbs like `summarize()`.

## Where did this come from?

`by/.by` was inspired by data.table!

-   `by` is specified alongside what you want to group
-   You start with a bare data table and then do this and end up with a bare data table, rather than having a grouped data frame like in dplyr.

```{r}
#| eval: false
transactions[, .(revenue = sum(revenue)), by = .(company, year)]
```

This raised the question, what if you can put it in line with your summarize call?

```{r}
transactions %>%
  summarize(revenue = sum(revenue),
            by = c(company, year))
```

## In summary

1.  `by/.by` is per-operation grouping

2.  `group_by()` is persistent grouping

dplyr verbs that support `by/.by`:

-   `mutate()`
-   `summarize()`
-   `reframe()`
-   `filter()`
-   `slice()`
-   `slide_head()` and `slice_tail()`
-   `slide_min()` and `slice_max()`
-   `slice_sample()`

### `by` or `.by`?

Some verbs use `.` prefix for their arguments and some don't. If you use the incorrect one, you will get an informative error:

```{r}
#| error: true
transactions |>
  slice_max(revenue, n = 2, .by = company)
```

```{r}
transactions %>% 
  slice_max(revenue, n = 2, by = company)
```

## What happens to `group_by()`?

It's not going away! It is not deprecated or even superseded. Don't feel pressure to use `by/.by`.

### Learn more

-   [tidyverse blog: dplyr 1.1.0: Per-operation grouping](https://www.tidyverse.org/blog/2023/02/dplyr-1-1-0-per-operation-grouping/)
-   [New features in dplyr 1.1.0, and an introduction to ivs](https://www.youtube.com/watch?v=9LAML4Nr1II&t=111s)
