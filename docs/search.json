[
  {
    "objectID": "posts/stringr-new-str-funs/index.html",
    "href": "posts/stringr-new-str-funs/index.html",
    "title": "New str_* functions",
    "section": "",
    "text": "Install stringr 1.5.0 with:\nLoad the package with:"
  },
  {
    "objectID": "posts/stringr-new-str-funs/index.html#new-str_-functions",
    "href": "posts/stringr-new-str-funs/index.html#new-str_-functions",
    "title": "New str_* functions",
    "section": "New str_* functions",
    "text": "New str_* functions\n\nstr_view()\nstr_equal()\nstr_rank()\nstr_unique()\nstr_split_1()\nstr_split_i()\nstr_escape()\n\n\nstr_view()\nstr_view() lets you clearly see a string with special characters:\n\nx <- \"a\\n'\\b\\n\\\"c\"\nx\n\n[1] \"a\\n'\\b\\n\\\"c\"\n\n\n\nBase Rstringr\n\n\nIn base R, you can use writeLines() to get a good look at the string:\n\nwriteLines(x)\n\na\n'\b\n\"c\n\n\n\n\nNow you can use str_view()!\n\nstr_view(x)\n\n[1] │ a\n    │ '\b\n    │ \"c\n\n\n\n\n\nstr_view() also highlights strings with special characters:\n\nWhite spaceTabs\n\n\n\nnbsp <- \"Hi\\u00A0you\"\nnbsp\n\n[1] \"Hi you\"\n\nnbsp == \"Hi you\"\n\n[1] FALSE\n\nstr_view(nbsp)\n\n[1] │ Hi{\\u00a0}you\n\n\n\n\n\ntab_space <- \"\\t\"\nstr_view(tab_space)\n\n[1] │ {\\t}\n\n\n\n\n\nFinally, str_view() makes matches stand out:\n\nstr_view(c(\"abc\", \"def\", \"fghi\"), \"[aeiou]\")\n\n[1] │ <a>bc\n[2] │ d<e>f\n[3] │ fgh<i>\n\nstr_view(c(\"abc\", \"def\", \"fghi\"), \".$\")\n\n[1] │ ab<c>\n[2] │ de<f>\n[3] │ fgh<i>\n\nstr_view(fruit, \"(.)\\\\1\")\n\n [1] │ a<pp>le\n [5] │ be<ll> pe<pp>er\n [6] │ bilbe<rr>y\n [7] │ blackbe<rr>y\n [8] │ blackcu<rr>ant\n [9] │ bl<oo>d orange\n[10] │ bluebe<rr>y\n[11] │ boysenbe<rr>y\n[16] │ che<rr>y\n[17] │ chili pe<pp>er\n[19] │ cloudbe<rr>y\n[21] │ cranbe<rr>y\n[23] │ cu<rr>ant\n[28] │ e<gg>plant\n[29] │ elderbe<rr>y\n[32] │ goji be<rr>y\n[33] │ g<oo>sebe<rr>y\n[38] │ hucklebe<rr>y\n[47] │ lych<ee>\n[50] │ mulbe<rr>y\n... and 9 more\n\n\n\n\nstr_equal()\nUse str_equal() to determine if two strings are equivalent:\n\nstr_equal(\"a\", \"A\")\n\n[1] FALSE\n\n\nYou have the option to ignore case:\n\nstr_equal(\"a\", \"A\", ignore_case = TRUE)\n\n[1] TRUE\n\n\n\na1 <- \"\\u00e1\"\na2 <- \"a\\u0301\"\nc(a1, a2)\n\n[1] \"á\" \"á\"\n\na1 == a2\n\n[1] FALSE\n\nstr_equal(a1, a2)\n\n[1] TRUE\n\n\n\n\nstr_rank()\n\nstr_rank(c(\"a\", \"c\", \"b\", \"b\"))\n\n[1] 1 4 2 2\n\nstr_order(c(\"a\", \"c\", \"b\", \"b\"))\n\n[1] 1 3 4 2\n\n\n\n\nstr_unique()\nstr_unique() returns unique values:\n\nstr_unique(c(\"a\", \"a\", \"A\"))\n\n[1] \"a\" \"A\"\n\n\nYou have the option to ignore case:\n\nstr_unique(c(\"a\", \"a\", \"A\"), ignore_case = TRUE)\n\n[1] \"a\"\n\n\n\n\nstr_split_1()\nstr_split_1() splits a single string. It returns a character vector, not a list:\n\nBefore 1.5.0After 1.5.0\n\n\n\nunlist(str_split(\"x-y-z\", \"-\"))\n\n[1] \"x\" \"y\" \"z\"\n\n\n\n\n\nstr_split_1(\"x-y-z\", \"-\")\n\n[1] \"x\" \"y\" \"z\"\n\n\n\n\n\nstr_split_1() errors if you try and give it multiple values:\n\n\nstr_split_i()\n\nx <- c(\"a-b-c\", \"d-e\", \"f-g-h-i\")\nstr_split_i(x, \"-\", 2)\n\n[1] \"b\" \"e\" \"g\"\n\nstr_split_i(x, \"-\", 4)\n\n[1] NA  NA  \"i\"\n\nstr_split_i(x, \"-\", -1)\n\n[1] \"c\" \"e\" \"i\"\n\n\nstr_like() works like str_detect() but uses SQL’s LIKE syntax:\n\nfruit <- c(\"apple\", \"banana\", \"pear\", \"pineapple\")\nfruit[str_like(fruit, \"%apple\")]\n\n[1] \"apple\"     \"pineapple\"\n\nfruit[str_like(fruit, \"p__r\")]\n\n[1] \"pear\"\n\n\n\n\nLearn more\n\ntidyverse blog: stringr 1.5.0\nstringr release notes"
  },
  {
    "objectID": "posts/tidyverse-2-0-0/index.html",
    "href": "posts/tidyverse-2-0-0/index.html",
    "title": "tidyverse 2.0.0",
    "section": "",
    "text": "Install the latest version of the tidyverse with:\nLoad the tidyverse with:\nDid you notice?"
  },
  {
    "objectID": "posts/tidyverse-2-0-0/index.html#welcome-to-the-core-tidyverse",
    "href": "posts/tidyverse-2-0-0/index.html#welcome-to-the-core-tidyverse",
    "title": "tidyverse 2.0.0",
    "section": "Welcome to the core tidyverse",
    "text": "Welcome to the core tidyverse\n\nlubridate!\n\n\n\n\n\n lubridate is now part of the core tidyverse! Loading the tidyverse automatically attaches lubridate, meaning that you do not have load it separately."
  },
  {
    "objectID": "posts/tidyverse-2-0-0/index.html#conflicted-package",
    "href": "posts/tidyverse-2-0-0/index.html#conflicted-package",
    "title": "tidyverse 2.0.0",
    "section": "conflicted package",
    "text": "conflicted package\nYou may have noticed this message:\nℹ Use the conflicted package to force all conflicts to become errors\ntidyverse 2.0.0 now advertises the conflicted package.\nPackages can have conflicts (i.e., contain functions of the same name). Normally, the package loaded last “wins” and masks (overrides) the other function, resulting in confusing errors.\n\nlibrary(dplyr)\nlibrary(MASS)\n\n\nAttaching package: 'MASS'\n\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\nselect\n\nfunction (obj) \nUseMethod(\"select\")\n<bytecode: 0x7fe2bf726d48>\n<environment: namespace:MASS>\n\n\nWith conflicted, you get an explicit error:\n\nlibrary(conflicted)\nlibrary(dplyr)\nlibrary(MASS)\n\nselect\n\nError:\n! [conflicted] select found in 2 packages.\nEither pick the one you want with `::`:\n• MASS::select\n• dplyr::select\nOr declare a preference with `conflicts_prefer()`:\n• `conflicts_prefer(MASS::select)`\n• `conflicts_prefer(dplyr::select)`\n\n\nIt asks you to either identify the namespace for each call:\n\ndplyr::select\n\nOr, declare a preference with conflicts_prefer():\n\nconflicts_prefer(dplyr::filter)\n\nThat way you know there’s a problem and how to resolve it."
  },
  {
    "objectID": "posts/tidyverse-2-0-0/index.html#learn-more",
    "href": "posts/tidyverse-2-0-0/index.html#learn-more",
    "title": "tidyverse 2.0.0",
    "section": "Learn more",
    "text": "Learn more\n\ntidyverse blog: tidyverse 2.0.0\ntidyverse release notes"
  },
  {
    "objectID": "posts/ggplot2-errors/index.html",
    "href": "posts/ggplot2-errors/index.html",
    "title": "Error messages",
    "section": "",
    "text": "ggplot 3.4.0 has been released. Install it with:\ninstall.packages(\"ggplot2\")\n\n\n…with better wording + cli package’s rich text formatting!\n\nlibrary(ggplot2)\n\nggplot(mtcars) %>% \n  geom_point(aes(mpg, disp))\n\nError in `geom_point()`:\n! `mapping` must be created by `aes()`\nℹ Did you use `%>%` or `|>` instead of `+`?\n\n\nggplot2 error messages can be hard to diagonose because you get the error when you print the plot rather than when it happens in the code. This version tells you what the problem is, where it came from, and what to do about it.\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\nmtcars %>% \n  ggplot(aes(x = cyl, y = hp)) +\n  geom_bar()\n\nError in `geom_bar()`:\n! Problem while computing stat.\nℹ Error occurred in the 1st layer.\nCaused by error in `setup_params()`:\n! `stat_count()` must only have an x or y aesthetic."
  },
  {
    "objectID": "posts/ggplot2-errors/index.html#learn-more",
    "href": "posts/ggplot2-errors/index.html#learn-more",
    "title": "Error messages",
    "section": "Learn more",
    "text": "Learn more\n\ntidyverse blog: ggplot 3.4.0\ntidyverse release notes"
  },
  {
    "objectID": "posts/ggplot2-linewidth/index.html",
    "href": "posts/ggplot2-linewidth/index.html",
    "title": "linewidth",
    "section": "",
    "text": "Install ggplot2 3.4.0 with:"
  },
  {
    "objectID": "posts/ggplot2-linewidth/index.html#learn-more",
    "href": "posts/ggplot2-linewidth/index.html#learn-more",
    "title": "linewidth",
    "section": "Learn more",
    "text": "Learn more\n\ntidyverse blog: ggplot2 3.4.0\nggplot2 release notes"
  },
  {
    "objectID": "posts/tidyr-separate-family/index.html",
    "href": "posts/tidyr-separate-family/index.html",
    "title": "tidyr 1.3.0",
    "section": "",
    "text": "Install tidyr 1.3.0 with:"
  },
  {
    "objectID": "posts/tidyr-separate-family/index.html#separate_-family-of-functions",
    "href": "posts/tidyr-separate-family/index.html#separate_-family-of-functions",
    "title": "tidyr 1.3.0",
    "section": "separate_*() family of functions",
    "text": "separate_*() family of functions\nA new family of separate_*() functions supersedes separate(), separate_rows(), and extract().\n\nBeforeAfter\n\n\n\n\n\n\n\n\n\n\n\nMake columns\nMake rows\n\n\n\n\nSeparate with delimiter\nseparate(sep = string)\nseparate_rows()\n\n\nSeparate by position\nseparate(sep = integer_vector\nN/A\n\n\nSeparate with regular expression\nextract()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMake columns\nMake rows\n\n\n\n\nSeparate with delimiter\nseparate_wider_delim()\nseparate_longer_delim()\n\n\nSeparate by position\nseparate_wider_position()\nseparate_longer_position()\n\n\nSeparate with regular expression\nseparate_wider_regex()\n\n\n\n\n\n\n\nLet’s grab some data from the tidyhydat package. The Date column is made up of a date in YYYY-MM-DD format and time in HH:MM:SS format:\n\nlibrary(tidyhydat)\nlibrary(tidyr)\nlibrary(dplyr)\n\nstation <-\n  realtime_dd(station_number = c(\"01CD005\", \"08MF005\"))\n\nstation\n\n  Queried on: 2023-03-21 03:31:11 (UTC)\n  Date range: 2023-02-19 to 2023-03-21 \n# A tibble: 34,144 × 8\n   STATION_NUMBER PROV_TE…¹ Date                Param…² Value Grade Symbol Code \n   <chr>          <chr>     <dttm>              <chr>   <dbl> <chr> <chr>  <chr>\n 1 01CD005        PE        2023-02-19 04:00:00 Flow    0.341 <NA>  <NA>   1    \n 2 01CD005        PE        2023-02-19 04:05:00 Flow    0.338 <NA>  <NA>   1    \n 3 01CD005        PE        2023-02-19 04:10:00 Flow    0.341 <NA>  <NA>   1    \n 4 01CD005        PE        2023-02-19 04:15:00 Flow    0.341 <NA>  <NA>   1    \n 5 01CD005        PE        2023-02-19 04:20:00 Flow    0.338 <NA>  <NA>   1    \n 6 01CD005        PE        2023-02-19 04:25:00 Flow    0.341 <NA>  <NA>   1    \n 7 01CD005        PE        2023-02-19 04:30:00 Flow    0.338 <NA>  <NA>   1    \n 8 01CD005        PE        2023-02-19 04:35:00 Flow    0.338 <NA>  <NA>   1    \n 9 01CD005        PE        2023-02-19 04:40:00 Flow    0.338 <NA>  <NA>   1    \n10 01CD005        PE        2023-02-19 04:45:00 Flow    0.338 <NA>  <NA>   1    \n# … with 34,134 more rows, and abbreviated variable names ¹​PROV_TERR_STATE_LOC,\n#   ²​Parameter\n\n\nUse separate_wider_position() to move these into their own columns:\n\nstation |>\n  select(Date) |>\n  separate_wider_position(Date,\n                          widths = c(ymd = 10, space = 1, hms = 8))\n\n# A tibble: 34,144 × 3\n   ymd        space hms     \n   <chr>      <chr> <chr>   \n 1 2023-02-19 \" \"   04:00:00\n 2 2023-02-19 \" \"   04:05:00\n 3 2023-02-19 \" \"   04:10:00\n 4 2023-02-19 \" \"   04:15:00\n 5 2023-02-19 \" \"   04:20:00\n 6 2023-02-19 \" \"   04:25:00\n 7 2023-02-19 \" \"   04:30:00\n 8 2023-02-19 \" \"   04:35:00\n 9 2023-02-19 \" \"   04:40:00\n10 2023-02-19 \" \"   04:45:00\n# … with 34,134 more rows\n\n\nWhat if we don’t want the space column?\n\nstation |>\n  select(Date) |>\n  separate_wider_position(Date,\n                          widths = c(ymd = 10, hms = 8))\n\nError in `separate_wider_position()`:\n! Expected 18 characters in each element of `Date`.\n! 34144 values were too long.\nℹ Use `too_many = \"debug\"` to diagnose the problem.\nℹ Use `too_many = \"drop\"` to silence this message.\n\n\n\nstation |>\n  select(Date) |>\n  separate_wider_position(Date,\n                          widths = c(ymd = 10, hms = 8),\n                          too_many = \"debug\")\n\nWarning: Debug mode activated: adding variables `Date_ok`, `Date_width`, and\n`Date_remainder`.\n\n\n# A tibble: 34,144 × 6\n   ymd        hms        Date                Date_width Date_remainder Date_ok\n   <chr>      <chr>      <dttm>                   <int> <chr>          <lgl>  \n 1 2023-02-19 \" 04:00:0\" 2023-02-19 04:00:00         19 0              FALSE  \n 2 2023-02-19 \" 04:05:0\" 2023-02-19 04:05:00         19 0              FALSE  \n 3 2023-02-19 \" 04:10:0\" 2023-02-19 04:10:00         19 0              FALSE  \n 4 2023-02-19 \" 04:15:0\" 2023-02-19 04:15:00         19 0              FALSE  \n 5 2023-02-19 \" 04:20:0\" 2023-02-19 04:20:00         19 0              FALSE  \n 6 2023-02-19 \" 04:25:0\" 2023-02-19 04:25:00         19 0              FALSE  \n 7 2023-02-19 \" 04:30:0\" 2023-02-19 04:30:00         19 0              FALSE  \n 8 2023-02-19 \" 04:35:0\" 2023-02-19 04:35:00         19 0              FALSE  \n 9 2023-02-19 \" 04:40:0\" 2023-02-19 04:40:00         19 0              FALSE  \n10 2023-02-19 \" 04:45:0\" 2023-02-19 04:45:00         19 0              FALSE  \n# … with 34,134 more rows\n\n\nUse NA if there are components that you don’t want to appear in the output:\n\nstation_split <-\n  station |>\n  select(Date) |>\n  separate_wider_position(Date,\n                          widths = c(ymd = 10, 1, hms = 8))\n\nstation_split\n\n# A tibble: 34,144 × 2\n   ymd        hms     \n   <chr>      <chr>   \n 1 2023-02-19 04:00:00\n 2 2023-02-19 04:05:00\n 3 2023-02-19 04:10:00\n 4 2023-02-19 04:15:00\n 5 2023-02-19 04:20:00\n 6 2023-02-19 04:25:00\n 7 2023-02-19 04:30:00\n 8 2023-02-19 04:35:00\n 9 2023-02-19 04:40:00\n10 2023-02-19 04:45:00\n# … with 34,134 more rows\n\n\nUse separate_wider_delim() to break things further down:\n\nstation_split |>\n  separate_wider_delim(ymd,\n                       delim = \"-\",\n                       names = c(\"year\", \"month\", \"day\")) |>\n  separate_wider_delim(hms,\n                       delim = \":\",\n                       names = c(\"hour\", \"minute\", \"second\"))\n\n# A tibble: 34,144 × 6\n   year  month day   hour  minute second\n   <chr> <chr> <chr> <chr> <chr>  <chr> \n 1 2023  02    19    04    00     00    \n 2 2023  02    19    04    05     00    \n 3 2023  02    19    04    10     00    \n 4 2023  02    19    04    15     00    \n 5 2023  02    19    04    20     00    \n 6 2023  02    19    04    25     00    \n 7 2023  02    19    04    30     00    \n 8 2023  02    19    04    35     00    \n 9 2023  02    19    04    40     00    \n10 2023  02    19    04    45     00    \n# … with 34,134 more rows\n\n\n\nstations <- \n  tidyhydat::hy_monthly_levels()"
  },
  {
    "objectID": "posts/tidyr-unnest-wider-unnest-longer-improvements/index.html",
    "href": "posts/tidyr-unnest-wider-unnest-longer-improvements/index.html",
    "title": "unnest_wider() and unnest_longer() improvements",
    "section": "",
    "text": "Install tidyr 1.3.0 with:"
  },
  {
    "objectID": "posts/tidyr-unnest-wider-unnest-longer-improvements/index.html#unnest_wider-and-unnest_longer-improvements",
    "href": "posts/tidyr-unnest-wider-unnest-longer-improvements/index.html#unnest_wider-and-unnest_longer-improvements",
    "title": "unnest_wider() and unnest_longer() improvements",
    "section": "unnest_wider() and unnest_longer() improvements",
    "text": "unnest_wider() and unnest_longer() improvements\nunnest_longer() and unnest_wider() have received some quality of life and consistency improvements.\nunnest_wider() now gives a better error when unnesting an unnamed vector:\n\nlibrary(tidyr)\n\ndf <- tibble(\n  id = 1:2,\n  x = list(c(\"a\", \"b\"), c(\"d\", \"e\", \"f\"))\n)\n\ndf\n\n# A tibble: 2 × 2\n     id x        \n  <int> <list>   \n1     1 <chr [2]>\n2     2 <chr [3]>\n\ndf |> \n  unnest_wider(x)\n\nError in `unnest_wider()`:\nℹ In column: `x`.\nℹ In row: 1.\nCaused by error:\n! Can't unnest elements with missing names.\nℹ Supply `names_sep` to generate automatic names.\n\n\n\ndf |> \n  unnest_wider(x, names_sep = \"_\")\n\n# A tibble: 2 × 4\n     id x_1   x_2   x_3  \n  <int> <chr> <chr> <chr>\n1     1 a     b     <NA> \n2     2 d     e     f    \n\n\nunnest_longer() has gained a keep_empty argument like unnest(), and it now treats NULL and empty vectors the same way:\n\ndf <- tibble(\n  id = 1:3,\n  x = list(NULL, integer(), 1:3)\n)\n\ndf \n\n# A tibble: 3 × 2\n     id x        \n  <int> <list>   \n1     1 <NULL>   \n2     2 <int [0]>\n3     3 <int [3]>\n\ndf |> unnest_longer(x)\n\n# A tibble: 3 × 2\n     id     x\n  <int> <int>\n1     3     1\n2     3     2\n3     3     3\n\ndf |> unnest_longer(x, keep_empty = TRUE)\n\n# A tibble: 5 × 2\n     id     x\n  <int> <int>\n1     1    NA\n2     2    NA\n3     3     1\n4     3     2\n5     3     3\n\n\n\nLearn more\n\ntidyverse blog: 1.3.0\nRelease notes"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "What's new in the tidyverse",
    "section": "",
    "text": "tidyverse 2.0.0\n\n\n\ntidyverse\n\n\n\ntidyverse 2.0.0 has been released!\n\n\n\n\n\n\nMar 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntidyr 1.3.0\n\n\n\ntidyr\n\n\n\nA new family of separate_*() functions supersedes separate(), separate_rows(), and extract().\n\n\n\n\n\n\nJan 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nunnest_wider() and unnest_longer() improvements\n\n\n\ntidyr\n\n\n\nunnest_longer() and unnest_wider() have received some quality of life and consistency improvements.\n\n\n\n\n\n\nJan 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew str_* functions\n\n\n\nstringr\n\n\n\nstringr has accumulated several new functions since its last release three years ago.\n\n\n\n\n\n\nDec 2, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nError messages\n\n\n\nggplot2\n\n\n\nggplot2 3.4.0 has improved error messages when running plots.\n\n\n\n\n\n\nNov 4, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlinewidth\n\n\n\nggplot2\n\n\n\nggplot2 3.4.0 introduces a new linewidth aesthetic.\n\n\n\n\n\n\nNov 4, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "What’s new in the tidyverse",
    "section": "",
    "text": "See all the packages in the tidyverse:\n\ntidyverse::tidyverse_packages(include_self = TRUE)\n\n [1] \"broom\"         \"conflicted\"    \"cli\"           \"dbplyr\"       \n [5] \"dplyr\"         \"dtplyr\"        \"forcats\"       \"ggplot2\"      \n [9] \"googledrive\"   \"googlesheets4\" \"haven\"         \"hms\"          \n[13] \"httr\"          \"jsonlite\"      \"lubridate\"     \"magrittr\"     \n[17] \"modelr\"        \"pillar\"        \"purrr\"         \"ragg\"         \n[21] \"readr\"         \"readxl\"        \"reprex\"        \"rlang\"        \n[25] \"rstudioapi\"    \"rvest\"         \"stringr\"       \"tibble\"       \n[29] \"tidyr\"         \"xml2\"          \"tidyverse\"    \n\n\nInstall the newest versions of packages using pak:\n\npak::pak(c(\"tidyverse\", \"dplyr\", \"tidyr\", \"stringr\", \"purrr\", \"ggplot2\"))"
  }
]