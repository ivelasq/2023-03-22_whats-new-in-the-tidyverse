[
  {
    "objectID": "posts/stringr-new-str-funs/index.html",
    "href": "posts/stringr-new-str-funs/index.html",
    "title": "New str_* functions",
    "section": "",
    "text": "Install the latest version of stringr with:"
  },
  {
    "objectID": "posts/stringr-new-str-funs/index.html#comparing-strings",
    "href": "posts/stringr-new-str-funs/index.html#comparing-strings",
    "title": "New str_* functions",
    "section": "Comparing strings",
    "text": "Comparing strings\n\nCompare two character vectors\n\nLoading webR..."
  },
  {
    "objectID": "posts/tidyverse-2-0-0/index.html",
    "href": "posts/tidyverse-2-0-0/index.html",
    "title": "tidyverse 2.0.0",
    "section": "",
    "text": "Install the latest version of the tidyverse with:\nLoad the tidyverse with:\nDid you notice?"
  },
  {
    "objectID": "posts/tidyverse-2-0-0/index.html#welcome-to-the-core-tidyverse",
    "href": "posts/tidyverse-2-0-0/index.html#welcome-to-the-core-tidyverse",
    "title": "tidyverse 2.0.0",
    "section": "Welcome to the core tidyverse",
    "text": "Welcome to the core tidyverse\n\nlubridate!\n\n\n\n\n\n lubridate is now part of the core tidyverse! Loading the tidyverse automatically attaches lubridate, meaning that you do not have load it separately."
  },
  {
    "objectID": "posts/tidyverse-2-0-0/index.html#conflicted-package",
    "href": "posts/tidyverse-2-0-0/index.html#conflicted-package",
    "title": "tidyverse 2.0.0",
    "section": "conflicted package",
    "text": "conflicted package\nYou may have noticed this message:\nℹ Use the conflicted package to force all conflicts to become errors\ntidyverse 2.0.0 now advertises the conflicted package.\nPackages can have conflicts (i.e., contain functions of the same name). Normally, the package loaded last “wins” and masks (overrides) the other function, resulting in confusing errors.\n\nlibrary(dplyr)\nlibrary(MASS)\n\n\nAttaching package: 'MASS'\n\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\nselect\n\nfunction (obj) \nUseMethod(\"select\")\n<bytecode: 0x7ff13f3150e0>\n<environment: namespace:MASS>\n\n\nWith conflicted, you get an explicit error:\n\nlibrary(conflicted)\nlibrary(dplyr)\nlibrary(MASS)\n\nselect\n\nError:\n! [conflicted] select found in 2 packages.\nEither pick the one you want with `::`:\n• MASS::select\n• dplyr::select\nOr declare a preference with `conflicts_prefer()`:\n• `conflicts_prefer(MASS::select)`\n• `conflicts_prefer(dplyr::select)`\n\n\nIt asks you to either identify the namespace for each call:\n\ndplyr::select\n\nOr, declare a preference with conflicts_prefer():\n\nconflicts_prefer(dplyr::filter)\n\nThat way you know there’s a problem and how to resolve it."
  },
  {
    "objectID": "posts/tidyverse-2-0-0/index.html#learn-more",
    "href": "posts/tidyverse-2-0-0/index.html#learn-more",
    "title": "tidyverse 2.0.0",
    "section": "Learn more",
    "text": "Learn more\n\ntidyverse blog: tidyverse 2.0.0\ntidyverse release notes"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "What's new in the tidyverse",
    "section": "",
    "text": "tidyverse_packages(include_self = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nNew str_* functions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntidyverse 2.0.0\n\n\ntidyverse 2.0.0 is now released!\n\n\n\n\n\n\nMar 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPer-operation grouping\n\n\n\ndplyr\n\n\n\n\n\n\n\n\n\n\nFeb 1, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Install the newest versions of packages using pak:\n\npak::pak(c(\"tidyverse\", \"dplyr\", \"tidyr\", \"stringr\", \"purrr\", \"ggplot2\"))"
  },
  {
    "objectID": "posts/dplyr-per-operation-grouping/index.html",
    "href": "posts/dplyr-per-operation-grouping/index.html",
    "title": "Per-operation grouping",
    "section": "",
    "text": "library(dplyr)\n\ntransactions <-\n  tibble::tribble(\n    ~company, ~year, ~revenue,\n         \"A\", 2019L,      20L,\n         \"A\", 2019L,      50L,\n         \"A\", 2020L,       4L,\n         \"B\", 2021L,      10L,\n         \"B\", 2023L,      12L,\n         \"B\", 2023L,      18L\n    )\n\nTotal yearly revenue of each company?\n\ntransactions %>% \n  group_by(company, year) %>% \n  summarize(revenue = sum(revenue))\n\n# A tibble: 4 × 3\n# Groups:   company [2]\n  company  year revenue\n  <chr>   <int>   <int>\n1 A        2019      70\n2 A        2020       4\n3 B        2021      10\n4 B        2023      30\n\n\n\ntransactions %>% \n  group_by(company, year,) %>% \n  summarize(revenue = sum(revenue)) %>% \n  ungroup()\n\n# A tibble: 4 × 3\n  company  year revenue\n  <chr>   <int>   <int>\n1 A        2019      70\n2 A        2020       4\n3 B        2021      10\n4 B        2023      30\n\n\n\ntransactions %>% \n  group_by(company, year,) %>% \n  summarize(revenue = sum(revenue),\n            .groups = \"drop\")\n\n# A tibble: 4 × 3\n  company  year revenue\n  <chr>   <int>   <int>\n1 A        2019      70\n2 A        2020       4\n3 B        2021      10\n4 B        2023      30\n\n\nEnter… datatable\nexplain datatable by is specified alongside what you want to group you start with a bare data table and then do this and end up with a bare data table, rather than having a grouped data frame like in dplyr\n\ntransactions[, .(revenue = sum(revenue)), by = .(company, year)]\n\nwhat if you can put it in line with your summarize call?\n\ntransactions %>% \n  summarize(\n    revenue = sum(revenue), \n    by = c(company, year)\n    )\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n# A tibble: 12 × 2\n   revenue by   \n     <int> <chr>\n 1     114 A    \n 2     114 A    \n 3     114 A    \n 4     114 B    \n 5     114 B    \n 6     114 B    \n 7     114 2019 \n 8     114 2019 \n 9     114 2020 \n10     114 2021 \n11     114 2023 \n12     114 2023 \n\n\nno longer grouped by company on the way out\n\n.by is per-operation grouping\ngroup_by is persistent grouping\n\nbythe one operation (summarize) then drop off bare tibble -> transaction -> always get a bare tibble not a grouped data frame don’t have to remember ungroup or specify groups = drop\n\nshow lines with more calls (mutate)\n\nuse tidyselect unquoted column names inside c() or starts-with .by = all_of(c(““)) by is just selection, does not create columns\n\ntransactions %>% \n  slice_max(revenue, n = 2, by = company)\n\n# A tibble: 4 × 3\n  company  year revenue\n  <chr>   <int>   <int>\n1 A        2019      50\n2 A        2019      20\n3 B        2023      18\n4 B        2023      12\n\n\nmutate summarize filter slice_*\nwhat happens to group_by?\nit’s not going away? not depricated or even superceded (discovered something better)\nyou don’t have to remember what will be taken off (outer most) and the order doesnt’ matter be more explict\nLearn more\n\nhttps://www.tidyverse.org/blog/2023/02/dplyr-1-1-0-per-operation-grouping/\nNew features in dplyr 1.1.0, and an introduction to ivs"
  }
]